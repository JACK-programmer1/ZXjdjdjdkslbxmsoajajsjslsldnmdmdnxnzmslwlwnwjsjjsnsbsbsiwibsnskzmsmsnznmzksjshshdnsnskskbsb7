#!/data/data/com.termux/files/usr/bin/AMER
import os
B = '\033[2:36m'#سمائي
print(B+' جاري تحميل مكاتب') 
os.system('termcolor') 
os.system('webbrowser') 
import requests 
resop = requests.get(f"https://mail.google.com") 
der=respo.header
print(der['Date']) 
import os,requests,sys,time,datetime
now = datetime.datetime.today()
an = datetime.datetime.now()
an2 = datetime.datetime(2026,7, 28,00, 30, 0)
hours = (now.hour)
code='7'
import termcolor as t 
import os 
import time , sys , random 
import pyfiglet
import base64
import zlib
import marshal
import dis
#from uncompyle6.main import decompile
import codecs
from subprocess import Popen, PIPE
from sys import stdout
from re import findall
from typing import Optional	
import sys,marshal,re
from typing import Union,Optional
from types import CodeType
from zipfile import ZipFile
from rich.console import Console
cons=Console()
console=cons
from subprocess import Popen, PIPE
import webbrowser,os,builtins
from multiprocessing import Process
from rich.syntax import Syntax
import os
print('\x1b[1;32mجــــار تـشــغـــيـل الاداه مشتركين  ')
a1 = '\x1b[1;31m'  # أحمر
a2 = '\x1b[1;34m'  # أزرق
a3 = '\x1b[1;32m'  # أخضر
a4 = '\x1b[1;33m'  # أصفر
a5 = '\x1b[38;5;208m'  # برتقالي
a6 = '\x1b[38;5;5m'  # أرجواني
a7 = '\x1b[38;5;13m'  # وردي
a8 = '\x1b[1;30m'  # أسود
a9 = '\x1b[1;37m'  # أبيض
a10 = '\x1b[38;5;52m'  # بني
a11 = '\x1b[38;5;8m'  # رمادي
a12 = '\x1b[38;5;220m'  # ذهبي
a13 = '\x1b[38;5;7m'  # فضي
a14 = '\x1b[38;5;153m'  # أزرق فاتح
a15 = '\x1b[38;5;18m'  # أزرق داكن
a16 = '\x1b[38;5;48m'  # أخضر فاتح
a17 = '\x1b[38;5;22m'  # أخضر داكن
a18 = '\x1b[38;5;196m'  # أحمر فاتح
a19 = '\x1b[38;5;88m'  # أحمر داكن
a20 = '\x1b[38;5;226m'  # أصفر فاتح
a21 = '\x1b[38;5;136m'  # أصفر داكن
a22 = '\x1b[38;5;216m'  # برتقالي فات
a23 = '\x1b[38;5;166m'  # برتقالي داكن
a24 = '\x1b[38;5;234m'  # أرجواني فاتح
a25 = '\x1b[38;5;91m'  # أرجواني داكن
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي
Z = '\033[1;31m' #احمر
R = '\033[1;31m' #احمر
X = '\033[1;33m' #اصفر
F = '\033[2;32m' #اخضر
C = "\033[1;97m" #ابيض
B = '\033[2;36m'#سمائي
Y = '\033[1;34m' #ازرق فاتح.
E = '\033[1;31m'
B = '\033[2;36m'
G = '\033[1;32m'
S = '\033[1;33m'
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m' 
O = '\x1b[1;96m'
N = '\x1b[0m'    
Z = "\033[1;30m"
sir = '\033[41m\x1b[1;97m'
x = '\33[m' # DEFAULT
m = '\x1b[1;91m' #RED +
k = '\033[93m' # KUNING +
h = '\x1b[1;92m' # HIJAU +
hh = '\033[32m' # HIJAU -
u = '\033[95m' # UNGU
kk = '\033[33m' # KUNING -
b = '\33[1;96m' # BIRU -
p = '\x1b[0;34m' # BIRU +
#asu = random.choice([m,k,h,u,b])
AB_A='\x1b[1;97m' # ابيض خط عربض
RS='\x1b[30m' #رصاصي
AH_F='\x1b[31m'   #احمر فاتح
AKH_F='\x1b[32m' #اخضر فاتح
AS_T='\x1b[33m'#اصفر طوخ
SM='\x1b[34m'  #سمائي
BN='\x1b[35m'#بنفسجي
AZ_T='\x1b[36m'  #ازرك طوخ
AB_KH='\x1b[37m' #ابيض خط خفيف
AH_T='\x1b[91m'  #احمر طوخ
AKH_T='\x1b[92m'#اخضر طوخ
AS_F='\x1b[93m'    #اصفر فاتح
WR='\x1b[95m'      #وردي
p='\x1b[38;5;208m' #برتقالي
AH2='\x1b[38;5;204m' 
AS2='\x1b[38;5;220m'
MJ='\x1b[38;5;193m'
MJ2='\x1b[38;5;216m'
MJ3='\x1b[38;5;190m'
O='\x1b[0;96m'     # Biru Muda
P='\x1b[38;5;231m' # Putih
J='\x1b[38;5;208m' # Jingga
MJ4='\x1b[38;5;106m'
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = '\x1b[1;30m'
sir = '\x1b[41m\x1b[1;97m'
x = '\x1b[m'
m = '\x1b[1;91m'
k = '\x1b[93m'
h = '\x1b[1;92m'
hh = '\x1b[32m'
u = '\x1b[95m'
kk = '\x1b[33m'
b = '\x1b[1;96m'
p = '\x1b[0;34m'
AB_A = '\x1b[1;97m'
RS = '\x1b[30m'
AH_F = '\x1b[31m'
AKH_F = '\x1b[32m'
AS_T = '\x1b[33m'
SM = '\x1b[34m'
BN = '\x1b[35m'
AZ_T = '\x1b[36m'
AB_KH = '\x1b[37m'
AH_T = '\x1b[91m'
AKH_T = '\x1b[92m'
AS_F = '\x1b[93m'
WR = '\x1b[95m'
p = '\x1b[38;5;208m'
AH2 = '\x1b[38;5;204m'
AS2 = '\x1b[38;5;220m'
MJ = '\x1b[38;5;193m'
MJ2 = '\x1b[38;5;216m'
MJ3 = '\x1b[38;5;190m'
O = '\x1b[0;96m'
P = '\x1b[38;5;231m'
J = '\x1b[38;5;208m'
MJ4 = '\x1b[38;5;106m'
a1 = '\x1b[1;31m'  # أحمر
a2 = '\x1b[1;34m'  # أزرق
a3 = '\x1b[1;32m'  # أخضر
a4 = '\x1b[1;33m'  # أصفر
a5 = '\x1b[38;5;208m'  # برتقالي
a6 = '\x1b[38;5;5m'  # أرجواني
a7 = '\x1b[38;5;13m'  # وردي
a8 = '\x1b[1;30m'  # أسود
a9 = '\x1b[1;37m'  # أبيض
a10 = '\x1b[38;5;52m'  # بني
a11 = '\x1b[38;5;8m'  # نـــمـــࢪودي
a12 = '\x1b[38;5;220m'  # ذهبي
a13 = '\x1b[38;5;7m'  # فضي
a14 = '\x1b[38;5;153m'  # أزرق فاتح
a15 = '\x1b[38;5;18m'  # أزرق داكن
a16 = '\x1b[38;5;48m'  # أخضر فاتح
a17 = '\x1b[38;5;22m'  # أخضر داكن
a18 = '\x1b[38;5;196m'  # أحمر فاتح
a19 = '\x1b[38;5;88m'  # أحمر داكن
a20 = '\x1b[38;5;226m'  # أصفر فاتح
a21 = '\x1b[38;5;136m'  # أصفر داكن
a22 = '\x1b[38;5;216m'  # برتقالي فات
a23 = '\x1b[38;5;166m'  # برتقالي داكن
a24 = '\x1b[38;5;234m'  # أرجواني فاتح
a25 = '\x1b[38;5;91m'  # أرجواني داكن
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # نـــمـــࢪودي فاتح
a35 = '\x1b[38;5;246m'  # نـــمـــࢪودي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[0;34m'  # أزرق سماوي
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m' 
O = '\x1b[1;96m'
N = '\x1b[0m'    
Z = "\033[1;30m"
sir = '\033[41m\x1b[1;97m'
x = '\33[m' # DEFAULT
m = '\x1b[1;91m' #RED +
k = '\033[93m' # KUNING +
h = '\x1b[1;92m' # HIJAU +
hh = '\033[32m' # HIJAU -
u = '\033[95m' # UNGU
kk = '\033[33m' # KUNING -
b = '\33[1;96m' # BIRU -
p = '\x1b[0;34m' # BIRU +
#asu = random.choice([m,k,h,u,b])
AB_A='\x1b[1;97m' # ابيض خط عربض
RS='\x1b[30m' #رصاصي
AH_F='\x1b[31m'   #احمر فاتح
AKH_F='\x1b[32m' #اخضر فاتح
AS_T='\x1b[33m'#اصفر طوخ
SM='\x1b[34m'  #سمائي
BN='\x1b[35m'#بنفسجي
AZ_T='\x1b[36m'  #ازرك طوخ
AB_KH='\x1b[37m' #ابيض خط خفيف
AH_T='\x1b[91m'  #احمر طوخ
AKH_T='\x1b[92m'#اخضر طوخ
AS_F='\x1b[93m'    #اصفر فاتح
WR='\x1b[95m'      #وردي
p='\x1b[38;5;208m' #برتقالي
AH2='\x1b[38;5;204m' 
AS2='\x1b[38;5;220m'
MJ='\x1b[38;5;193m'
MJ2='\x1b[38;5;216m'
MJ3='\x1b[38;5;190m'
O='\x1b[0;96m'     # Biru Muda
P='\x1b[38;5;231m' # Putih
J='\x1b[38;5;208m' # Jingga
MJ4='\x1b[38;5;106m'
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = '\x1b[1;30m'
sir = '\x1b[41m\x1b[1;97m'
x = '\x1b[m'
m = '\x1b[1;91m'
k = '\x1b[93m'
h = '\x1b[1;92m'
hh = '\x1b[32m'
u = '\x1b[95m'
kk = '\x1b[33m'
b = '\x1b[1;96m'
p = '\x1b[0;34m'
AB_A = '\x1b[1;97m'
RS = '\x1b[30m'
AH_F = '\x1b[31m'
AKH_F = '\x1b[32m'
AS_T = '\x1b[33m'
SM = '\x1b[34m'
BN = '\x1b[35m'
AZ_T = '\x1b[36m'
AB_KH = '\x1b[37m'
AH_T = '\x1b[91m'
AKH_T = '\x1b[92m'
AS_F = '\x1b[93m'
WR = '\x1b[95m'
p = '\x1b[38;5;208m'
AH2 = '\x1b[38;5;204m'
AS2 = '\x1b[38;5;220m'
MJ = '\x1b[38;5;193m'
MJ2 = '\x1b[38;5;216m'
MJ3 = '\x1b[38;5;190m'
O = '\x1b[0;96m'
P = '\x1b[38;5;231m'
J = '\x1b[38;5;208m'
MJ4 = '\x1b[38;5;106m'
E = '\033[1;31m'
G = '\033[1;35m'
Z = '\033[1;31m' #احمر
X = '\033[1;33m' #اصف
Z1 = '\033[2;31m' #احمر ثاني
F = '\033[2;32m' #اخضر
A = '\033[2;34m'#ازرق
C = '\033[2;35m' #وردي
B = '\033[2;36m'#سمائي
Y = '\033[1;34m' #ازرق فاتح
M = '\x1b[1;37m'#ابیض
S = '\033[1;33m'
Z = '\033[1;31m' #احمر
R = '\033[1;31m' #احمر
X = '\033[1;33m' #اصفر
F = '\033[2;32m' #اخضر
C = "\033[1;97m" #ابيض
B = '\033[2;36m'#سمائي
Y = '\033[1;34m' #ازرق فاتح.
E = '\033[1;31m'
B = '\033[2;36m'
G = '\033[1;32m'
S = '\033[1;33m'
C1 = '\033[2;35m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = '\x1b[1;30m'
sir = '\x1b[41m\x1b[1;97m'
x = '\x1b[m'
m = '\x1b[1;91m'
k = '\x1b[93m'
h = '\x1b[1;92m'
hh = '\x1b[32m'
u = '\x1b[95m'
kk = '\x1b[33m'
b = '\x1b[1;96m'
p = '\x1b[0;34m'
AB_A = '\x1b[1;97m'
RS = '\x1b[30m'
AH_F = '\x1b[31m'
AKH_F = '\x1b[32m'
AS_T = '\x1b[33m'
SM = '\x1b[34m'
BN = '\x1b[35m'
AZ_T = '\x1b[36m'
AB_KH = '\x1b[37m'
AH_T = '\x1b[91m'
AKH_T = '\x1b[92m'
AS_F = '\x1b[93m'
WR = '\x1b[95m'
p = '\x1b[38;5;208m'
AH2 = '\x1b[38;5;204m'
AS2 = '\x1b[38;5;220m'
MJ = '\x1b[38;5;193m'
MJ2 = '\x1b[38;5;216m'
MJ3 = '\x1b[38;5;190m'
O = '\x1b[0;96m'
P = '\x1b[38;5;231m'
J = '\x1b[38;5;208m'
MJ4 = '\x1b[38;5;106m'
Z = '\x1b[1;31m'
R = '\x1b[1;31m'
X = '\x1b[1;33m'
F = '\x1b[2;32m'
C = '\x1b[1;97m'
B = '\x1b[2;36m'
Y = '\x1b[1;34m'
E = '\x1b[1;31m'
B = '\x1b[2;36m'
G = '\x1b[1;32m'
S = '\x1b[1;33m'
F = '\x1b[2;32m'
L = '\x1b[1;95m'
E = '\x1b[1;31m'
G = '\x1b[1;32m'
S = '\x1b[1;33m'
Z = '\x1b[1;31m'
X = '\x1b[1;33m'
Z1 = '\x1b[2;31m'
F = '\x1b[2;32m'
A = '\x1b[2;39m'
C = '\x1b[2;35m'
B = '\x1b[2;36m'
Y = '\x1b[1;34m'
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = '\x1b[1;30m'
sir = '\x1b[41m\x1b[1;97m'
x = '\x1b[m'
m = '\x1b[1;91m'
k = '\x1b[93m'
h = '\x1b[1;92m'
hh = '\x1b[32m'
u = '\x1b[95m'
kk = '\x1b[33m'
b = '\x1b[1;96m'
p = '\x1b[0;34m'
AB_A = '\x1b[1;97m'
RS = '\x1b[30m'
AH_F = '\x1b[31m'
AKH_F = '\x1b[32m'
AS_T = '\x1b[33m'
SM = '\x1b[34m'
BN = '\x1b[35m'
AZ_T = '\x1b[36m'
AB_KH = '\x1b[37m'
AH_T = '\x1b[91m'
AKH_T = '\x1b[92m'
AS_F = '\x1b[93m'
WR = '\x1b[95m'
p = '\x1b[38;5;208m'
AH2 = '\x1b[38;5;204m'
AS2 = '\x1b[38;5;220m'
MJ = '\x1b[38;5;193m'
MJ2 = '\x1b[38;5;216m'
MJ3 = '\x1b[38;5;190m'
O = '\x1b[0;96m'
W = '\x1b[38;5;231m'
J = '\x1b[38;5;208m'
MJ4 = '\x1b[38;5;106m'
r1 = '''[38;5;8m'''
m1 = '''[38;5;196m'''
a1 = '''[1;31m'''
a2 = '''[1;34m'''
a3 = '''[1;32m'''
a4 = '''[1;33m'''
a5 = '''[38;5;208m'''
a6 = '''[38;5;5m'''
a7 = '''[38;5;13m'''
a8 = '''[1;30m'''
a9 = '''[1;37m'''
a10 = '''[38;5;52m'''
a11 = '''[38;5;8m'''
a12 = '''[38;5;220m'''
a13 = '''[38;5;7m'''
a14 = '''[38;5;153m'''
a15 = '''[38;5;18m'''
a16 = '''[38;5;48m'''
a17 = '''[38;5;22m'''
a18 = '''[38;5;196m'''
a19 = '''[38;5;88m'''
a20 = '''[38;5;226m'''
a21 = '''[38;5;136m'''
a22 = '''[38;5;216m'''
a23 = '''[38;5;166m'''
a24 = '''[38;5;234m'''
a25 = '''[38;5;91m'''
a26 = '''[38;5;205m'''
a27 = '''[38;5;161m'''
a28 = '''[38;5;236m'''
a29 = '''[38;5;233m'''
a30 = '''[38;5;255m'''
a31 = '''[38;5;231m'''
a32 = '''[38;5;180m'''
a33 = '''[38;5;94m'''
a34 = '''[38;5;252m'''
a35 = '''[38;5;246m'''
a36 = '''[38;5;228m'''
a37 = '''[38;5;172m'''
a38 = '''[38;5;188m'''
a39 = '''[38;5;247m'''
a40 = '''[38;5;117m'''
P = '''[1;97m'''
M = '''[1;91m'''
H = '''[1;92m'''
K = '''[1;93m'''
B = '''[1;94m'''
U = '''[1;95m'''
O = '''[1;96m'''
N = '''[0m'''
Z = '''[1;30m'''
sir = '''[41m[1;97m'''
x = '''[m'''
m = '''[1;91m'''
k = '''[93m'''
h = '''[1;92m'''
hh = '''[32m'''
u = '''[95m'''
kk = '''[33m'''
b = '''[1;96m'''
p = '''[0;34m'''
os.system("clear")

#------------------------------[الالوان]------------------------------
E = '\033[1;31m'
G = '\033[1;35m'
Z = '\033[1;31m'  # احمر
X = '\033[1;33m'  # اصفر
Z1 = '\033[2;31m'  # احمر ثاني
F = '\033[2;32m'  # اخضر
A = '\033[2;34m'  # ازرق
C = '\033[2;35m'  # وردي
B = '\x1b[38;5;208m'  # برتقالي
Y = '\033[1;34m'  # ازرق فاتح
M = '\x1b[1;37m'  # ابیض
S = '\033[1;33m'
U = '\x1b[1;37m'  # ابیض
BRed = '\x1b[1;31m'
BGreen = '\x1b[1;32m'
BYellow = '\x1b[1;33m'
R = '\x1b[1;34m'
BPurple = '\x1b[1;35m'
BCyan = '\x1b[1;36m'
BWhite = '\x1b[1;37m'
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = "\033[1;30m"
sir = '\033[41m\x1b[1;97m'
x = '\33[m' # DEFAULT
m = '\x1b[1;91m' #RED +
k = '\033[93m' # KUNING +
h = '\x1b[1;92m' # HIJAU +
hh = '\033[32m' # HIJAU -
u = '\033[95m' # UNGU
kk = '\033[33m' # KUNING -
b = '\33[1;96m' # BIRU -
p = '\x1b[0;34m' # BIRU +
#asu = random.choice([m,k,h,u,b])
AB_A='\x1b[1;97m' # ابيض خط عربض
RS='\x1b[30m' #رصاصي
AH_F='\x1b[31m'   #احمر فاتح
AKH_F='\x1b[32m' #اخضر فاتح
AS_T='\x1b[33m'#اصفر طوخ
SM='\x1b[34m'  #سمائي
BN='\x1b[35m'#بنفسجي
AZ_T='\x1b[36m'  #ازرك طوخ
AB_KH='\x1b[37m' #ابيض خط خفيف
AH_T='\x1b[91m'  #احمر طوخ
AKH_T='\x1b[92m'#اخضر طوخ
AS_F='\x1b[93m'    #اصفر فاتح
WR='\x1b[95m'      #وردي
p='\x1b[38;5;208m' #برتقالي
AH2='\x1b[38;5;204m'
AS2='\x1b[38;5;220m'
MJ='\x1b[38;5;193m'
MJ2='\x1b[38;5;216m'
MJ3='\x1b[38;5;190m'
O='\x1b[0;96m'     # Biru Muda
P='\x1b[38;5;231m' # Putih
J='\x1b[38;5;208m' # Jingga
MJ4='\x1b[38;5;106m'
Z = '\033[1;31m' #احمر
R = '\033[1;31m' #احمر
X = '\033[1;33m' #اصفر
F = '\033[2;32m' #اخضر
C = "\033[1;97m" #ابيض
B = '\033[2;36m'#سمائي
Y = '\033[1;34m' #ازرق فاتح.
E = '\033[1;31m'
B = '\033[2;36m'
G = '\033[1;32m'
S = '\033[1;33m'
color0 = "\u001b[38;5;0m"
color1 = "\u001b[38;5;1m"
color2 = "\u001b[38;5;2m"
color3 = "\u001b[38;5;3m"
color4 = "\u001b[38;5;4m"
color5 = "\u001b[38;5;5m"
color6 = "\u001b[38;5;6m"
color7 = "\u001b[38;5;7m"
color8 = "\u001b[38;5;8m"
color9 = "\u001b[38;5;9m"
color10 = "\u001b[38;5;10m"
color11 = "\u001b[38;5;11m"
color12 = "\u001b[38;5;12m"
color13 = "\u001b[38;5;13m"
color14 = "\u001b[38;5;14m"
color15 = "\u001b[38;5;15m"
color16 = "\u001b[38;5;16m"
color17 = "\u001b[38;5;17m"
color18 = "\u001b[38;5;18m"
color19 = "\u001b[38;5;19m"
color20 = "\u001b[38;5;20m"
color21 = "\u001b[38;5;21m"
color22 = "\u001b[38;5;22m"
color23 = "\u001b[38;5;23m"
color24 = "\u001b[38;5;24m"
color25 = "\u001b[38;5;25m"
color26 = "\u001b[38;5;26m"
color27 = "\u001b[38;5;27m"
color28 = "\u001b[38;5;28m"
color29 = "\u001b[38;5;29m"
color30 = "\u001b[38;5;30m"
color31 = "\u001b[38;5;31m"
color32 = "\u001b[38;5;32m"
color33 = "\u001b[38;5;33m"
color34 = "\u001b[38;5;34m"
color35 = "\u001b[38;5;35m"
color36 = "\u001b[38;5;36m"
color37 = "\u001b[38;5;37m"
color38 = "\u001b[38;5;38m"
color39 = "\u001b[38;5;39m"
color40 = "\u001b[38;5;40m"
color41 = "\u001b[38;5;41m"
color42 = "\u001b[38;5;42m"
color43 = "\u001b[38;5;43m"
color44 = "\u001b[38;5;44m"
color45 = "\u001b[38;5;45m"
color46 = "\u001b[38;5;46m"
color47 = "\u001b[38;5;47m"
color48 = "\u001b[38;5;48m"
color49 = "\u001b[38;5;49m"
color50 = "\u001b[38;5;50m"
color51 = "\u001b[38;5;51m"
color52 = "\u001b[38;5;52m"
color53 = "\u001b[38;5;53m"
color54 = "\u001b[38;5;54m"
color55 = "\u001b[38;5;55m"
color56 = "\u001b[38;5;56m"
color57 = "\u001b[38;5;57m"
color58 = "\u001b[38;5;58m"
color59 = "\u001b[38;5;59m"
color60 = "\u001b[38;5;60m"
color61 = "\u001b[38;5;61m"
color62 = "\u001b[38;5;62m"
color63 = "\u001b[38;5;63m"
color64 = "\u001b[38;5;64m"
color65 = "\u001b[38;5;65m"
color66 = "\u001b[38;5;66m"
color67 = "\u001b[38;5;67m"
color68 = "\u001b[38;5;68m"
color69 = "\u001b[38;5;69m"
color70 = "\u001b[38;5;70m"
color71 = "\u001b[38;5;71m"
color72 = "\u001b[38;5;72m"
color73 = "\u001b[38;5;73m"
color74 = "\u001b[38;5;74m"
color75 = "\u001b[38;5;75m"
color76 = "\u001b[38;5;76m"
color77 = "\u001b[38;5;77m"
color78 = "\u001b[38;5;78m"
color79 = "\u001b[38;5;79m"
color80 = "\u001b[38;5;80m"
color81 = "\u001b[38;5;81m"
color82 = "\u001b[38;5;82m"
color83 = "\u001b[38;5;83m"
color84 = "\u001b[38;5;84m"
color85 = "\u001b[38;5;85m"
color86 = "\u001b[38;5;86m"
color87 = "\u001b[38;5;87m"
color88 = "\u001b[38;5;88m"
color89 = "\u001b[38;5;89m"
color90 = "\u001b[38;5;90m"
color91 = "\u001b[38;5;91m"
color92 = "\u001b[38;5;92m"
color93 = "\u001b[38;5;93m"
color94 = "\u001b[38;5;94m"
color95 = "\u001b[38;5;95m"
color96 = "\u001b[38;5;96m"
color97 = "\u001b[38;5;97m"
color98 = "\u001b[38;5;98m"
color99 = "\u001b[38;5;99m"
color100 = "\u001b[38;5;100m"
color101 = "\u001b[38;5;101m"
color102 = "\u001b[38;5;102m"
color103 = "\u001b[38;5;103m"
color104 = "\u001b[38;5;104m"
color105 = "\u001b[38;5;105m"
color106 = "\u001b[38;5;106m"
color107 = "\u001b[38;5;107m"
color108 = "\u001b[38;5;108m"
color109 = "\u001b[38;5;109m"
color110 = "\u001b[38;5;110m"
color111 = "\u001b[38;5;111m"
color112 = "\u001b[38;5;112m"
color113 = "\u001b[38;5;113m"
color114 = "\u001b[38;5;114m"
color115 = "\u001b[38;5;115m"
color116 = "\u001b[38;5;116m"
color117 = "\u001b[38;5;117m"
color118 = "\u001b[38;5;118m"
color119 = "\u001b[38;5;119m"
color120 = "\u001b[38;5;120m"
color121 = "\u001b[38;5;121m"
color122 = "\u001b[38;5;122m"
color123 = "\u001b[38;5;123m"
color124 = "\u001b[38;5;124m"
color125 = "\u001b[38;5;125m"
color126 = "\u001b[38;5;126m"
color127 = "\u001b[38;5;127m"
color128 = "\u001b[38;5;128m"
color129 = "\u001b[38;5;129m"
color130 = "\u001b[38;5;130m"
color131 = "\u001b[38;5;131m"
color132 = "\u001b[38;5;132m"
color133 = "\u001b[38;5;133m"
color134 = "\u001b[38;5;134m"
color135 = "\u001b[38;5;135m"
color136 = "\u001b[38;5;136m"
color137 = "\u001b[38;5;137m"
color138 = "\u001b[38;5;138m"
color139 = "\u001b[38;5;139m"
color140 = "\u001b[38;5;140m"
color141 = "\u001b[38;5;141m"
color142 = "\u001b[38;5;142m"
color143 = "\u001b[38;5;143m"
color144 = "\u001b[38;5;144m"
color145 = "\u001b[38;5;145m"
color146 = "\u001b[38;5;146m"
color147 = "\u001b[38;5;147m"
color148 = "\u001b[38;5;148m"
color149 = "\u001b[38;5;149m"
color150 = "\u001b[38;5;150m"
color151 = "\u001b[38;5;151m"
color152 = "\u001b[38;5;152m"
color153 = "\u001b[38;5;153m"
color154 = "\u001b[38;5;154m"
color155 = "\u001b[38;5;155m"
color156 = "\u001b[38;5;156m"
color157 = "\u001b[38;5;157m"
color158 = "\u001b[38;5;158m"
color159 = "\u001b[38;5;159m"
color160 = "\u001b[38;5;160m"
color161 = "\u001b[38;5;161m"
color162 = "\u001b[38;5;162m"
color163 = "\u001b[38;5;163m"
color164 = "\u001b[38;5;164m"
color165 = "\u001b[38;5;165m"
color166 = "\u001b[38;5;166m"
color167 = "\u001b[38;5;167m"
color168 = "\u001b[38;5;168m"
color169 = "\u001b[38;5;169m"
color170 = "\u001b[38;5;170m"
color171 = "\u001b[38;5;171m"
color172 = "\u001b[38;5;172m"
color173 = "\u001b[38;5;173m"
color174 = "\u001b[38;5;174m"
color175 = "\u001b[38;5;175m"
color176 = "\u001b[38;5;176m"
color177 = "\u001b[38;5;177m"
color178 = "\u001b[38;5;178m"
color179 = "\u001b[38;5;179m"
color180 = "\u001b[38;5;180m"
color181 = "\u001b[38;5;181m"
color182 = "\u001b[38;5;182m"
color183 = "\u001b[38;5;183m"
color184 = "\u001b[38;5;184m"
color185 = "\u001b[38;5;185m"
color186 = "\u001b[38;5;186m"
color187 = "\u001b[38;5;187m"
color188 = "\u001b[38;5;188m"
color189 = "\u001b[38;5;189m"
color190 = "\u001b[38;5;190m"
color191 = "\u001b[38;5;191m"
color192 = "\u001b[38;5;192m"
color193 = "\u001b[38;5;193m"
color194 = "\u001b[38;5;194m"
color195 = "\u001b[38;5;195m"
color196 = "\u001b[38;5;196m"
color197 = "\u001b[38;5;197m"
color198 = "\u001b[38;5;198m"
color199 = "\u001b[38;5;199m"
color200 = "\u001b[38;5;200m"
color201 = "\u001b[38;5;201m"
color202 = "\u001b[38;5;202m"
color203 = "\u001b[38;5;203m"
color204 = "\u001b[38;5;204m"
color205 = "\u001b[38;5;205m"
color206 = "\u001b[38;5;206m"
color207 = "\u001b[38;5;207m"
color208 = "\u001b[38;5;208m"
color209 = "\u001b[38;5;209m"
color210 = "\u001b[38;5;210m"
color211 = "\u001b[38;5;211m"
color212 = "\u001b[38;5;212m"
color213 = "\u001b[38;5;213m"
color214 = "\u001b[38;5;214m"
color215 = "\u001b[38;5;215m"
color216 = "\u001b[38;5;216m"
color217 = "\u001b[38;5;217m"
color218 = "\u001b[38;5;218m"
color219 = "\u001b[38;5;219m"
color220 = "\u001b[38;5;220m"
color221 = "\u001b[38;5;221m"
color222 = "\u001b[38;5;222m"
color223 = "\u001b[38;5;223m"
color224 = "\u001b[38;5;224m"
color225 = "\u001b[38;5;225m"
color226 = "\u001b[38;5;226m"
color227 = "\u001b[38;5;227m"
color228 = "\u001b[38;5;228m"
color229 = "\u001b[38;5;229m"
color230 = "\u001b[38;5;230m"
color231 = "\u001b[38;5;231m"
color232 = "\u001b[38;5;232m"
color233 = "\u001b[38;5;233m"
color234 = "\u001b[38;5;234m"
color235 = "\u001b[38;5;235m"
color236 = "\u001b[38;5;236m"
color237 = "\u001b[38;5;237m"
color238 = "\u001b[38;5;238m"
color239 = "\u001b[38;5;239m"
color240 = "\u001b[38;5;240m"
color241 = "\u001b[38;5;241m"
color242 = "\u001b[38;5;242m"
color243 = "\u001b[38;5;243m"
color244 = "\u001b[38;5;244m"
color245 = "\u001b[38;5;245m"
color246 = "\u001b[38;5;246m"
color247 = "\u001b[38;5;247m"
color248 = "\u001b[38;5;248m"
color249 = "\u001b[38;5;249m"
color250 = "\u001b[38;5;250m"
color251 = "\u001b[38;5;251m"
color252 = "\u001b[38;5;252m"
color253 = "\u001b[38;5;253m"
color254 = "\u001b[38;5;254m"
color255 = "\u001b[38;5;255m"
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = "\033[1;30m"
x = '\33[m' # DEFAULT
m = '\x1b[1;91m' #RED +
k = '\x1b[38;5;208m' # KUNING +
h = '\x1b[38;5;204m' # HIJAU +
hh = '\x1b[38;5;220m' # HIJAU -
u = '\x1b[38;5;193m' # UNGU
kk = '\x1b[38;5;216m' # KUNING -
b = '\x1b[38;5;190m' # BIRU -
p = '\x1b[38;5;106m' # BIRU +
a10 = '\x1b[38;5;52m'  # بني
a11 = '\x1b[38;5;8m'  # رمادي
a12 = '\x1b[38;5;220m'  # ذهبي
a13 = '\x1b[38;5;7m'  # فضي
a14 = '\x1b[38;5;153m'  # أزرق فاتح
a15 = '\x1b[38;5;18m'  # أزرق داكن
a16 = '\x1b[38;5;48m'  # أخضر فاتح
a17 = '\x1b[38;5;22m'  # أخضر داكن
a18 = '\x1b[38;5;196m'  # أحمر فاتح
a19 = '\x1b[38;5;88m'  # أحمر داكن
a20 = '\x1b[38;5;226m'  # أصفر فاتح
a21 = '\x1b[38;5;136m'  # أصفر داكن
a22 = '\x1b[38;5;216m'  # برتقالي فات
a23 = '\x1b[38;5;166m'  # برتقالي داكن
a24 = '\x1b[38;5;234m'  # أرجواني فاتح
a25 = '\x1b[38;5;91m'  # أرجواني داكن
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي
###
G2 = ('\x1b[1;32m') # اخضر
G1 = '\x1b[1;97m' # ابيض
G2 = '\x1b[38;5;196m' # برتقالي
G3 = '\x1b[1;33m' # اصفر
G4 = '\x1b[1;96m'# سمائي
G5 = '\x1b[38;5;8m'#رصاصي
G6 = '\x1b[38;5;48m' # اخضر مميز 45%
G7 = '\x1b[38;5;47m' # اخضر HD
G8 = '\x1b[38;5;49m' # سمائي + اخضر
G9 = '\x1b[38;5;50m' # سمائي + اخضر HD
G10 = '\x1b[1;34m' # ازرق
G11 = '\x1b[38;5;14m' # سمائي خفيف
G12 = '\x1b[38;5;123m' # سمائي فقط 
G13 = '\x1b[38;5;122m'# سمائي بجودة عالية
G14 = '\x1b[38;5;86m'# سمائي مميز
G14 = '\x1b[38;5;121m' # وردي
G15 = '\x1b[38;5;205m' # برتقالي غامق
G16 = '\x1b[1;92m\x1b[38;5;208m'# برتقالي فاتح
G17 = '\x1b[1;92m\x1b[38;5;209m'# برتقالي + وردي 35%
G18 = '\x1b[1;92m\x1b[38;5;210m'# برتقالي + وردي 66%
G19 = '\x1b[1;92m\x1b[38;5;211m'# وردي فاتح
G20 = '\x1b[1;92m\x1b[38;5;212m'# اخضر غامق
G21 = '\x1b[1;92m\x1b[38;5;46m' # اخضر  غامق 50%
G23 = '\x1b[1;92m\x1b[38;5;47m' # اخضر خفيف
G24 = '\x1b[1;92m\x1b[38;5;48m'# اخضر فاتح 50%
G25 = '\x1b[1;92m\x1b[38;5;49m' # سمائي 
G26 = '\x1b[1;92m\x1b[38;5;50m'# سمائي مميز 2
###
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي
###
ReSs0 = "\u001b[38;5;0m"
ReSs1 = "\u001b[38;5;1m"
ReSs2 = "\u001b[38;5;2m"
ReSs3 = "\u001b[38;5;3m"
ReSs4 = "\u001b[38;5;4m"
ReSs5 = "\u001b[38;5;5m"
ReSs6 = "\u001b[38;5;6m"
ReSs7 = "\u001b[38;5;7m"
ReSs8 = "\u001b[38;5;8m"
ReSs9 = "\u001b[38;5;9m"
ReSs10 = "\u001b[38;5;10m"
ReSs11 = "\u001b[38;5;11m"
ReSs12 = "\u001b[38;5;12m"
ReSs13 = "\u001b[38;5;13m"
ReSs14 = "\u001b[38;5;14m"
ReSs15 = "\u001b[38;5;15m"
ReSs16 = "\u001b[38;5;16m"
ReSs17 = "\u001b[38;5;17m"
ReSs18 = "\u001b[38;5;18m"
ReSs19 = "\u001b[38;5;19m"
ReSs20 = "\u001b[38;5;20m"
ReSs21 = "\u001b[38;5;21m"
ReSs22 = "\u001b[38;5;22m"
ReSs23 = "\u001b[38;5;23m"
ReSs24 = "\u001b[38;5;24m"
ReSs25 = "\u001b[38;5;25m"
ReSs26 = "\u001b[38;5;26m"
ReSs27 = "\u001b[38;5;27m"
ReSs28 = "\u001b[38;5;28m"
ReSs29 = "\u001b[38;5;29m"
ReSs30 = "\u001b[38;5;30m"
ReSs31 = "\u001b[38;5;31m"
ReSs32 = "\u001b[38;5;32m"
ReSs33 = "\u001b[38;5;33m"
ReSs34 = "\u001b[38;5;34m"
ReSs35 = "\u001b[38;5;35m"
ReSs36 = "\u001b[38;5;36m"
ReSs37 = "\u001b[38;5;37m"
ReSs38 = "\u001b[38;5;38m"
ReSs39 = "\u001b[38;5;39m"
ReSs40 = "\u001b[38;5;40m"
ReSs41 = "\u001b[38;5;41m"
ReSs42 = "\u001b[38;5;42m"
ReSs43 = "\u001b[38;5;43m"
ReSs44 = "\u001b[38;5;44m"
ReSs45 = "\u001b[38;5;45m"
ReSs46 = "\u001b[38;5;46m"
ReSs47 = "\u001b[38;5;47m"
ReSs48 = "\u001b[38;5;48m"
ReSs49 = "\u001b[38;5;49m"
ReSs50 = "\u001b[38;5;50m"
ReSs51 = "\u001b[38;5;51m"
ReSs52 = "\u001b[38;5;52m"
ReSs53 = "\u001b[38;5;53m"
ReSs54 = "\u001b[38;5;54m"
ReSs55 = "\u001b[38;5;55m"
ReSs56 = "\u001b[38;5;56m"
ReSs57 = "\u001b[38;5;57m"
ReSs58 = "\u001b[38;5;58m"
ReSs59 = "\u001b[38;5;59m"
ReSs60 = "\u001b[38;5;60m"
ReSs61 = "\u001b[38;5;61m"
ReSs62 = "\u001b[38;5;62m"
ReSs63 = "\u001b[38;5;63m"
ReSs64 = "\u001b[38;5;64m"
ReSs65 = "\u001b[38;5;65m"
ReSs66 = "\u001b[38;5;66m"
ReSs67 = "\u001b[38;5;67m"
ReSs68 = "\u001b[38;5;68m"
ReSs69 = "\u001b[38;5;69m"
ReSs70 = "\u001b[38;5;70m"
ReSs71 = "\u001b[38;5;71m"
ReSs72 = "\u001b[38;5;72m"
ReSs73 = "\u001b[38;5;73m"
ReSs74 = "\u001b[38;5;74m"
ReSs75 = "\u001b[38;5;75m"
ReSs76 = "\u001b[38;5;76m"
ReSs77 = "\u001b[38;5;77m"
ReSs78 = "\u001b[38;5;78m"
ReSs79 = "\u001b[38;5;79m"
ReSs80 = "\u001b[38;5;80m"
ReSs81 = "\u001b[38;5;81m"
ReSs82 = "\u001b[38;5;82m"
ReSs83 = "\u001b[38;5;83m"
ReSs84 = "\u001b[38;5;84m"
ReSs85 = "\u001b[38;5;85m"
ReSs86 = "\u001b[38;5;86m"
ReSs87 = "\u001b[38;5;87m"
ReSs88 = "\u001b[38;5;88m"
ReSs89 = "\u001b[38;5;89m"
ReSs90 = "\u001b[38;5;90m"
ReSs91 = "\u001b[38;5;91m"
ReSs92 = "\u001b[38;5;92m"
ReSs93 = "\u001b[38;5;93m"
ReSs94 = "\u001b[38;5;94m"
ReSs95 = "\u001b[38;5;95m"
ReSs96 = "\u001b[38;5;96m"
ReSs97 = "\u001b[38;5;97m"
ReSs98 = "\u001b[38;5;98m"
ReSs99 = "\u001b[38;5;99m"
ReSs100 = "\u001b[38;5;100m"
ReSs101 = "\u001b[38;5;101m"
ReSs102 = "\u001b[38;5;102m"
ReSs103 = "\u001b[38;5;103m"
ReSs104 = "\u001b[38;5;104m"
ReSs105 = "\u001b[38;5;105m"
ReSs106 = "\u001b[38;5;106m"
ReSs107 = "\u001b[38;5;107m"
ReSs108 = "\u001b[38;5;108m"
ReSs109 = "\u001b[38;5;109m"
ReSs110 = "\u001b[38;5;110m"
ReSs111 = "\u001b[38;5;111m"
ReSs112 = "\u001b[38;5;112m"
ReSs113 = "\u001b[38;5;113m"
ReSs114 = "\u001b[38;5;114m"
ReSs115 = "\u001b[38;5;115m"
ReSs116 = "\u001b[38;5;116m"
ReSs117 = "\u001b[38;5;117m"
ReSs118 = "\u001b[38;5;118m"
ReSs119 = "\u001b[38;5;119m"
ReSs120 = "\u001b[38;5;120m"
ReSs121 = "\u001b[38;5;121m"
ReSs122 = "\u001b[38;5;122m"
ReSs123 = "\u001b[38;5;123m"
ReSs124 = "\u001b[38;5;124m"
ReSs125 = "\u001b[38;5;125m"
ReSs126 = "\u001b[38;5;126m"
ReSs127 = "\u001b[38;5;127m"
ReSs128 = "\u001b[38;5;128m"
ReSs129 = "\u001b[38;5;129m"
ReSs130 = "\u001b[38;5;130m"
ReSs131 = "\u001b[38;5;131m"
ReSs132 = "\u001b[38;5;132m"
ReSs133 = "\u001b[38;5;133m"
ReSs134 = "\u001b[38;5;134m"
ReSs135 = "\u001b[38;5;135m"
ReSs136 = "\u001b[38;5;136m"
ReSs137 = "\u001b[38;5;137m"
ReSs138 = "\u001b[38;5;138m"
ReSs139 = "\u001b[38;5;139m"
ReSs140 = "\u001b[38;5;140m"
ReSs141 = "\u001b[38;5;141m"
ReSs142 = "\u001b[38;5;142m"
ReSs143 = "\u001b[38;5;143m"
ReSs144 = "\u001b[38;5;144m"
ReSs145 = "\u001b[38;5;145m"
ReSs146 = "\u001b[38;5;146m"
ReSs147 = "\u001b[38;5;147m"
ReSs148 = "\u001b[38;5;148m"
ReSs149 = "\u001b[38;5;149m"
ReSs150 = "\u001b[38;5;150m"
ReSs151 = "\u001b[38;5;151m"
ReSs152 = "\u001b[38;5;152m"
ReSs153 = "\u001b[38;5;153m"
ReSs154 = "\u001b[38;5;154m"
ReSs155 = "\u001b[38;5;155m"
ReSs156 = "\u001b[38;5;156m"
ReSs157 = "\u001b[38;5;157m"
ReSs158 = "\u001b[38;5;158m"
ReSs159 = "\u001b[38;5;159m"
ReSs160 = "\u001b[38;5;160m"
ReSs161 = "\u001b[38;5;161m"
ReSs162 = "\u001b[38;5;162m"
ReSs163 = "\u001b[38;5;163m"
ReSs164 = "\u001b[38;5;164m"
ReSs165 = "\u001b[38;5;165m"
ReSs166 = "\u001b[38;5;166m"
ReSs167 = "\u001b[38;5;167m"
ReSs168 = "\u001b[38;5;168m"
ReSs169 = "\u001b[38;5;169m"
ReSs170 = "\u001b[38;5;170m"
ReSs171 = "\u001b[38;5;171m"
ReSs172 = "\u001b[38;5;172m"
ReSs173 = "\u001b[38;5;173m"
ReSs174 = "\u001b[38;5;174m"
ReSs175 = "\u001b[38;5;175m"
ReSs176 = "\u001b[38;5;176m"
ReSs177 = "\u001b[38;5;177m"
ReSs178 = "\u001b[38;5;178m"
ReSs179 = "\u001b[38;5;179m"
ReSs180 = "\u001b[38;5;180m"
ReSs181 = "\u001b[38;5;181m"
ReSs182 = "\u001b[38;5;182m"
ReSs183 = "\u001b[38;5;183m"
ReSs184 = "\u001b[38;5;184m"
ReSs185 = "\u001b[38;5;185m"
ReSs186 = "\u001b[38;5;186m"
ReSs187 = "\u001b[38;5;187m"
ReSs188 = "\u001b[38;5;188m"
ReSs189 = "\u001b[38;5;189m"
ReSs190 = "\u001b[38;5;190m"
ReSs191 = "\u001b[38;5;191m"
ReSs192 = "\u001b[38;5;192m"
ReSs193 = "\u001b[38;5;193m"
ReSs194 = "\u001b[38;5;194m"
ReSs195 = "\u001b[38;5;195m"
ReSs196 = "\u001b[38;5;196m"
ReSs197 = "\u001b[38;5;197m"
ReSs198 = "\u001b[38;5;198m"
ReSs199 = "\u001b[38;5;199m"
ReSs200 = "\u001b[38;5;200m"
ReSs201 = "\u001b[38;5;201m"
ReSs202 = "\u001b[38;5;202m"
ReSs203 = "\u001b[38;5;203m"
ReSs204 = "\u001b[38;5;204m"
ReSs205 = "\u001b[38;5;205m"
ReSs206 = "\u001b[38;5;206m"
ReSs207 = "\u001b[38;5;207m"
ReSs208 = "\u001b[38;5;208m"
ReSs209 = "\u001b[38;5;209m"
ReSs210 = "\u001b[38;5;210m"
ReSs211 = "\u001b[38;5;211m"
ReSs212 = "\u001b[38;5;212m"
ReSs213 = "\u001b[38;5;213m"
ReSs214 = "\u001b[38;5;214m"
ReSs215 = "\u001b[38;5;215m"
ReSs216 = "\u001b[38;5;216m"
ReSs217 = "\u001b[38;5;217m"
ReSs218 = "\u001b[38;5;218m"
ReSs219 = "\u001b[38;5;219m"
ReSs220 = "\u001b[38;5;220m"
ReSs221 = "\u001b[38;5;221m"
ReSs222 = "\u001b[38;5;222m"
ReSs223 = "\u001b[38;5;223m"
ReSs224 = "\u001b[38;5;224m"
ReSs225 = "\u001b[38;5;225m"
ReSs226 = "\u001b[38;5;226m"
ReSs227 = "\u001b[38;5;227m"
ReSs228 = "\u001b[38;5;228m"
ReSs229 = "\u001b[38;5;229m"
ReSs230 = "\u001b[38;5;230m"
ReSs231 = "\u001b[38;5;231m"
ReSs232 = "\u001b[38;5;232m"
ReSs233 = "\u001b[38;5;233m"
ReSs234 = "\u001b[38;5;234m"
ReSs235 = "\u001b[38;5;235m"
ReSs236 = "\u001b[38;5;236m"
ReSs237 = "\u001b[38;5;237m"
ReSs238 = "\u001b[38;5;238m"
ReSs239 = "\u001b[38;5;239m"
ReSs240 = "\u001b[38;5;240m"
ReSs241 = "\u001b[38;5;241m"
ReSs242 = "\u001b[38;5;242m"
ReSs243 = "\u001b[38;5;243m"
ReSs244 = "\u001b[38;5;244m"
ReSs245 = "\u001b[38;5;245m"
ReSs246 = "\u001b[38;5;246m"
ReSs247 = "\u001b[38;5;247m"
ReSs248 = "\u001b[38;5;248m"
ReSs249 = "\u001b[38;5;249m"
ReSs250 = "\u001b[38;5;250m"
ReSs251 = "\u001b[38;5;251m"
ReSs252 = "\u001b[38;5;252m"
ReSs253 = "\u001b[38;5;253m"
ReSs254 = "\u001b[38;5;254m"
###
A = "\x1b[0;90m"     # Hitam
B = "\x1b[38;5;196m" # Merah
C = "\x1b[38;5;46m"  # Hijau
D = "\x1b[38;5;226m" # Kuning
E = "\x1b[38;5;44m"  # Biru
F = "\x1b[38;5;231m" # Putih
G = "\x1b[38;5;248m" 
H = '\x1b[38;5;208m'
I ='\033[1;37m'
O = '\033[31;1m'
P = '\033[32;1m'
V = '\033[33;1m'
U = '\033[34;1m'
N = '\033[35;1m'
K = '\033[36;1m'
LR = '\033[91;1m'
LG = '\033[92;1m'
LY = '\033[93;1m'
LB = '\033[94;1m'
LM = '\033[95;1m'
LC = '\033[96;1m'
xxh = '\x1b[38;5;208m'#برتقالي
r1='\x1b[38;5;8m'#رمادي
m1='\x1b[38;5;196m'#احمر
a1 = '\x1b[1;31m'  # أحمر
a2 = '\x1b[1;34m'  # أزرق
a3 = '\x1b[1;32m'  # أخضر
a4 = '\x1b[1;33m'  # أصفر
a5 = '\x1b[38;5;208m'  # برتقالي
a6 = '\x1b[38;5;5m'  # أرجواني
a7 = '\x1b[38;5;13m'  # وردي
a8 = '\x1b[1;30m'  # أسود
a9 = '\x1b[1;37m'  # أبيض
a10 = '\x1b[38;5;52m'  # بني
a11 = '\x1b[38;5;8m'  # رمادي
a12 = '\x1b[38;5;220m'  # ذهبي
a13 = '\x1b[38;5;7m'  # فضي
a14 = '\x1b[38;5;153m'  # أزرق فاتح
a15 = '\x1b[38;5;18m'  # أزرق داكن
a16 = '\x1b[38;5;48m'  # أخضر فاتح
a17 = '\x1b[38;5;22m'  # أخضر داكن
a18 = '\x1b[38;5;196m'  # أحمر فاتح
a19 = '\x1b[38;5;88m'  # أحمر داكن
a20 = '\x1b[38;5;226m'  # أصفر فاتح
a21 = '\x1b[38;5;136m'  # أصفر داكن
a22 = '\x1b[38;5;216m'  # برتقالي فاتح
a23 = '\x1b[38;5;166m'  # برتقالي داكن
a25 = '\x1b[38;5;91m'  # أرجواني داكن
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي
###
E = '\033[1;31m'
G = '\033[1;35m'
Z = '\033[1;31m'  # احمر
X = '\033[1;33m'  # اصفر
Z1 = '\033[2;31m'  # احمر ثاني
F = '\033[2;32m'  # اخضر
A = '\033[2;34m'  # ازرق
C = '\033[2;35m'  # وردي
B = '\x1b[38;5;208m'  # برتقالي
Y = '\033[1;34m'  # ازرق فاتح
M = '\x1b[1;37m'  # ابیض
S = '\033[1;33m'
U = '\x1b[1;37m'  # ابیض
BRed = '\x1b[1;31m'
BGreen = '\x1b[1;32m'
BYellow = '\x1b[1;33m'
R = '\x1b[1;34m'
BPurple = '\x1b[1;35m'
BCyan = '\x1b[1;36m'
BWhite = '\x1b[1;37m'
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = "\033[1;30m"
sir = '\033[41m\x1b[1;97m'
x = '\33[m' # DEFAULT
m = '\x1b[1;91m' #RED +
k = '\033[93m' # KUNING +
h = '\x1b[1;92m' # HIJAU +
hh = '\033[32m' # HIJAU -
u = '\033[95m' # UNGU
kk = '\033[33m' # KUNING -
b = '\33[1;96m' # BIRU -
p = '\x1b[0;34m' # BIRU +
#asu = random.choice([m,k,h,u,b])
AB_A='\x1b[1;97m' # ابيض خط عربض
RS='\x1b[30m' #رصاصي
AH_F='\x1b[31m'   #احمر فاتح
AKH_F='\x1b[32m' #اخضر فاتح
AS_T='\x1b[33m'#اصفر طوخ
SM='\x1b[34m'  #سمائي
BN='\x1b[35m'#بنفسجي
AZ_T='\x1b[36m'  #ازرك طوخ
AB_KH='\x1b[37m' #ابيض خط خفيف
AH_T='\x1b[91m'  #احمر طوخ
AKH_T='\x1b[92m'#اخضر طوخ
AS_F='\x1b[93m'    #اصفر فاتح
WR='\x1b[95m'      #وردي
p='\x1b[38;5;208m' #برتقالي
AH2='\x1b[38;5;204m'
AS2='\x1b[38;5;220m'
MJ='\x1b[38;5;193m'
MJ2='\x1b[38;5;216m'
MJ3='\x1b[38;5;190m'
O='\x1b[0;96m'     # Biru Muda
P='\x1b[38;5;231m' # Putih
J='\x1b[38;5;208m' # Jingga
MJ4='\x1b[38;5;106m'
Z = '\033[1;31m' #احمر
R = '\033[1;31m' #احمر
X = '\033[1;33m' #اصفر
F = '\033[2;32m' #اخضر
C = "\033[1;97m" #ابيض
B = '\033[2;36m'#سمائي
Y = '\033[1;34m' #ازرق فاتح.
E = '\033[1;31m'
B = '\033[2;36m'
G = '\033[1;32m'
S = '\033[1;33m'
color0 = "\u001b[38;5;0m"
color1 = "\u001b[38;5;1m"
color2 = "\u001b[38;5;2m"
color3 = "\u001b[38;5;3m"
color4 = "\u001b[38;5;4m"
color5 = "\u001b[38;5;5m"
color6 = "\u001b[38;5;6m"
color7 = "\u001b[38;5;7m"
color8 = "\u001b[38;5;8m"
color9 = "\u001b[38;5;9m"
color10 = "\u001b[38;5;10m"
color11 = "\u001b[38;5;11m"
color12 = "\u001b[38;5;12m"
color13 = "\u001b[38;5;13m"
color14 = "\u001b[38;5;14m"
color15 = "\u001b[38;5;15m"
color16 = "\u001b[38;5;16m"
color17 = "\u001b[38;5;17m"
color18 = "\u001b[38;5;18m"
color19 = "\u001b[38;5;19m"
color20 = "\u001b[38;5;20m"
color21 = "\u001b[38;5;21m"
color22 = "\u001b[38;5;22m"
color23 = "\u001b[38;5;23m"
color24 = "\u001b[38;5;24m"
color25 = "\u001b[38;5;25m"
color26 = "\u001b[38;5;26m"
color27 = "\u001b[38;5;27m"
color28 = "\u001b[38;5;28m"
color29 = "\u001b[38;5;29m"
color30 = "\u001b[38;5;30m"
color31 = "\u001b[38;5;31m"
color32 = "\u001b[38;5;32m"
color33 = "\u001b[38;5;33m"
color34 = "\u001b[38;5;34m"
color35 = "\u001b[38;5;35m"
color36 = "\u001b[38;5;36m"
color37 = "\u001b[38;5;37m"
color38 = "\u001b[38;5;38m"
color39 = "\u001b[38;5;39m"
color40 = "\u001b[38;5;40m"
color41 = "\u001b[38;5;41m"
color42 = "\u001b[38;5;42m"
color43 = "\u001b[38;5;43m"
color44 = "\u001b[38;5;44m"
color45 = "\u001b[38;5;45m"
color46 = "\u001b[38;5;46m"
color47 = "\u001b[38;5;47m"
color48 = "\u001b[38;5;48m"
color49 = "\u001b[38;5;49m"
color50 = "\u001b[38;5;50m"
color51 = "\u001b[38;5;51m"
color52 = "\u001b[38;5;52m"
color53 = "\u001b[38;5;53m"
color54 = "\u001b[38;5;54m"
color55 = "\u001b[38;5;55m"
color56 = "\u001b[38;5;56m"
color57 = "\u001b[38;5;57m"
color58 = "\u001b[38;5;58m"
color59 = "\u001b[38;5;59m"
color60 = "\u001b[38;5;60m"
color61 = "\u001b[38;5;61m"
color62 = "\u001b[38;5;62m"
color63 = "\u001b[38;5;63m"
color64 = "\u001b[38;5;64m"
color65 = "\u001b[38;5;65m"
color66 = "\u001b[38;5;66m"
color67 = "\u001b[38;5;67m"
color68 = "\u001b[38;5;68m"
color69 = "\u001b[38;5;69m"
color70 = "\u001b[38;5;70m"
color71 = "\u001b[38;5;71m"
color72 = "\u001b[38;5;72m"
color73 = "\u001b[38;5;73m"
color74 = "\u001b[38;5;74m"
color75 = "\u001b[38;5;75m"
color76 = "\u001b[38;5;76m"
color77 = "\u001b[38;5;77m"
color78 = "\u001b[38;5;78m"
color79 = "\u001b[38;5;79m"
color80 = "\u001b[38;5;80m"
color81 = "\u001b[38;5;81m"
color82 = "\u001b[38;5;82m"
color83 = "\u001b[38;5;83m"
color84 = "\u001b[38;5;84m"
color85 = "\u001b[38;5;85m"
color86 = "\u001b[38;5;86m"
color87 = "\u001b[38;5;87m"
color88 = "\u001b[38;5;88m"
color89 = "\u001b[38;5;89m"
color90 = "\u001b[38;5;90m"
color91 = "\u001b[38;5;91m"
color92 = "\u001b[38;5;92m"
color93 = "\u001b[38;5;93m"
color94 = "\u001b[38;5;94m"
color95 = "\u001b[38;5;95m"
color96 = "\u001b[38;5;96m"
color97 = "\u001b[38;5;97m"
color98 = "\u001b[38;5;98m"
color99 = "\u001b[38;5;99m"
color100 = "\u001b[38;5;100m"
color101 = "\u001b[38;5;101m"
color102 = "\u001b[38;5;102m"
color103 = "\u001b[38;5;103m"
color104 = "\u001b[38;5;104m"
color105 = "\u001b[38;5;105m"
color106 = "\u001b[38;5;106m"
color107 = "\u001b[38;5;107m"
color108 = "\u001b[38;5;108m"
color109 = "\u001b[38;5;109m"
color110 = "\u001b[38;5;110m"
color111 = "\u001b[38;5;111m"
color112 = "\u001b[38;5;112m"
color113 = "\u001b[38;5;113m"
color114 = "\u001b[38;5;114m"
color115 = "\u001b[38;5;115m"
color116 = "\u001b[38;5;116m"
color117 = "\u001b[38;5;117m"
color118 = "\u001b[38;5;118m"
color119 = "\u001b[38;5;119m"
color120 = "\u001b[38;5;120m"
color121 = "\u001b[38;5;121m"
color122 = "\u001b[38;5;122m"
color123 = "\u001b[38;5;123m"
color124 = "\u001b[38;5;124m"
color125 = "\u001b[38;5;125m"
color126 = "\u001b[38;5;126m"
color127 = "\u001b[38;5;127m"
color128 = "\u001b[38;5;128m"
color129 = "\u001b[38;5;129m"
color130 = "\u001b[38;5;130m"
color131 = "\u001b[38;5;131m"
color132 = "\u001b[38;5;132m"
color133 = "\u001b[38;5;133m"
color134 = "\u001b[38;5;134m"
color135 = "\u001b[38;5;135m"
color136 = "\u001b[38;5;136m"
color137 = "\u001b[38;5;137m"
color138 = "\u001b[38;5;138m"
color139 = "\u001b[38;5;139m"
color140 = "\u001b[38;5;140m"
color141 = "\u001b[38;5;141m"
color142 = "\u001b[38;5;142m"
color143 = "\u001b[38;5;143m"
color144 = "\u001b[38;5;144m"
color145 = "\u001b[38;5;145m"
color146 = "\u001b[38;5;146m"
color147 = "\u001b[38;5;147m"
color148 = "\u001b[38;5;148m"
color149 = "\u001b[38;5;149m"
color150 = "\u001b[38;5;150m"
color151 = "\u001b[38;5;151m"
color152 = "\u001b[38;5;152m"
color153 = "\u001b[38;5;153m"
color154 = "\u001b[38;5;154m"
color155 = "\u001b[38;5;155m"
color156 = "\u001b[38;5;156m"
color157 = "\u001b[38;5;157m"
color158 = "\u001b[38;5;158m"
color159 = "\u001b[38;5;159m"
color160 = "\u001b[38;5;160m"
color161 = "\u001b[38;5;161m"
color162 = "\u001b[38;5;162m"
color163 = "\u001b[38;5;163m"
color164 = "\u001b[38;5;164m"
color165 = "\u001b[38;5;165m"
color166 = "\u001b[38;5;166m"
color167 = "\u001b[38;5;167m"
color168 = "\u001b[38;5;168m"
color169 = "\u001b[38;5;169m"
color170 = "\u001b[38;5;170m"
color171 = "\u001b[38;5;171m"
color172 = "\u001b[38;5;172m"
color173 = "\u001b[38;5;173m"
color174 = "\u001b[38;5;174m"
color175 = "\u001b[38;5;175m"
color176 = "\u001b[38;5;176m"
color177 = "\u001b[38;5;177m"
color178 = "\u001b[38;5;178m"
color179 = "\u001b[38;5;179m"
color180 = "\u001b[38;5;180m"
color181 = "\u001b[38;5;181m"
color182 = "\u001b[38;5;182m"
color183 = "\u001b[38;5;183m"
color184 = "\u001b[38;5;184m"
color185 = "\u001b[38;5;185m"
color186 = "\u001b[38;5;186m"
color187 = "\u001b[38;5;187m"
color188 = "\u001b[38;5;188m"
color189 = "\u001b[38;5;189m"
color190 = "\u001b[38;5;190m"
color191 = "\u001b[38;5;191m"
color192 = "\u001b[38;5;192m"
color193 = "\u001b[38;5;193m"
color194 = "\u001b[38;5;194m"
color195 = "\u001b[38;5;195m"
color196 = "\u001b[38;5;196m"
color197 = "\u001b[38;5;197m"
color198 = "\u001b[38;5;198m"
color199 = "\u001b[38;5;199m"
color200 = "\u001b[38;5;200m"
color201 = "\u001b[38;5;201m"
color202 = "\u001b[38;5;202m"
color203 = "\u001b[38;5;203m"
color204 = "\u001b[38;5;204m"
color205 = "\u001b[38;5;205m"
color206 = "\u001b[38;5;206m"
color207 = "\u001b[38;5;207m"
color208 = "\u001b[38;5;208m"
color209 = "\u001b[38;5;209m"
color210 = "\u001b[38;5;210m"
color211 = "\u001b[38;5;211m"
color212 = "\u001b[38;5;212m"
color213 = "\u001b[38;5;213m"
color214 = "\u001b[38;5;214m"
color215 = "\u001b[38;5;215m"
color216 = "\u001b[38;5;216m"
color217 = "\u001b[38;5;217m"
color218 = "\u001b[38;5;218m"
color219 = "\u001b[38;5;219m"
color220 = "\u001b[38;5;220m"
color221 = "\u001b[38;5;221m"
color222 = "\u001b[38;5;222m"
color223 = "\u001b[38;5;223m"
color224 = "\u001b[38;5;224m"
color225 = "\u001b[38;5;225m"
color226 = "\u001b[38;5;226m"
color227 = "\u001b[38;5;227m"
color228 = "\u001b[38;5;228m"
color229 = "\u001b[38;5;229m"
color230 = "\u001b[38;5;230m"
color231 = "\u001b[38;5;231m"
color232 = "\u001b[38;5;232m"
color233 = "\u001b[38;5;233m"
color234 = "\u001b[38;5;234m"
color235 = "\u001b[38;5;235m"
color236 = "\u001b[38;5;236m"
color237 = "\u001b[38;5;237m"
color238 = "\u001b[38;5;238m"
color239 = "\u001b[38;5;239m"
color240 = "\u001b[38;5;240m"
color241 = "\u001b[38;5;241m"
color242 = "\u001b[38;5;242m"
color243 = "\u001b[38;5;243m"
color244 = "\u001b[38;5;244m"
color245 = "\u001b[38;5;245m"
color246 = "\u001b[38;5;246m"
color247 = "\u001b[38;5;247m"
color248 = "\u001b[38;5;248m"
color249 = "\u001b[38;5;249m"
color250 = "\u001b[38;5;250m"
color251 = "\u001b[38;5;251m"
color252 = "\u001b[38;5;252m"
color253 = "\u001b[38;5;253m"
color254 = "\u001b[38;5;254m"
color255 = "\u001b[38;5;255m"
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = "\033[1;30m"
x = '\33[m' # DEFAULT
m = '\x1b[1;91m' #RED +
k = '\x1b[38;5;208m' # KUNING +
h = '\x1b[38;5;204m' # HIJAU +
hh = '\x1b[38;5;220m' # HIJAU -
u = '\x1b[38;5;193m' # UNGU
kk = '\x1b[38;5;216m' # KUNING -
b = '\x1b[38;5;190m' # BIRU -
p = '\x1b[38;5;106m' # BIRU +
a10 = '\x1b[38;5;52m'  # بني
a11 = '\x1b[38;5;8m'  # رمادي
a12 = '\x1b[38;5;220m'  # ذهبي
a13 = '\x1b[38;5;7m'  # فضي
a14 = '\x1b[38;5;153m'  # أزرق فاتح
a15 = '\x1b[38;5;18m'  # أزرق داكن
a16 = '\x1b[38;5;48m'  # أخضر فاتح
a17 = '\x1b[38;5;22m'  # أخضر داكن
a18 = '\x1b[38;5;196m'  # أحمر فاتح
a19 = '\x1b[38;5;88m'  # أحمر داكن
a20 = '\x1b[38;5;226m'  # أصفر فاتح
a21 = '\x1b[38;5;136m'  # أصفر داكن
a22 = '\x1b[38;5;216m'  # برتقالي فات
a23 = '\x1b[38;5;166m'  # برتقالي داكن
a24 = '\x1b[38;5;234m'  # أرجواني فاتح
a25 = '\x1b[38;5;91m'  # أرجواني داكن
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي
###
G2 = ('\x1b[1;32m') # اخضر
G1 = '\x1b[1;97m' # ابيض
G2 = '\x1b[38;5;196m' # برتقالي
G3 = '\x1b[1;33m' # اصفر
G4 = '\x1b[1;96m'# سمائي
G5 = '\x1b[38;5;8m'#رصاصي
G6 = '\x1b[38;5;48m' # اخضر مميز 45%
G7 = '\x1b[38;5;47m' # اخضر HD
G8 = '\x1b[38;5;49m' # سمائي + اخضر
G9 = '\x1b[38;5;50m' # سمائي + اخضر HD
G10 = '\x1b[1;34m' # ازرق
G11 = '\x1b[38;5;14m' # سمائي خفيف
G12 = '\x1b[38;5;123m' # سمائي فقط 
G13 = '\x1b[38;5;122m'# سمائي بجودة عالية
G14 = '\x1b[38;5;86m'# سمائي مميز
G14 = '\x1b[38;5;121m' # وردي
G15 = '\x1b[38;5;205m' # برتقالي غامق
G16 = '\x1b[1;92m\x1b[38;5;208m'# برتقالي فاتح
G17 = '\x1b[1;92m\x1b[38;5;209m'# برتقالي + وردي 35%
G18 = '\x1b[1;92m\x1b[38;5;210m'# برتقالي + وردي 66%
G19 = '\x1b[1;92m\x1b[38;5;211m'# وردي فاتح
G20 = '\x1b[1;92m\x1b[38;5;212m'# اخضر غامق
G21 = '\x1b[1;92m\x1b[38;5;46m' # اخضر  غامق 50%
G23 = '\x1b[1;92m\x1b[38;5;47m' # اخضر خفيف
G24 = '\x1b[1;92m\x1b[38;5;48m'# اخضر فاتح 50%
G25 = '\x1b[1;92m\x1b[38;5;49m' # سمائي 
G26 = '\x1b[1;92m\x1b[38;5;50m'# سمائي مميز 2
###
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي
###
ReSs0 = "\u001b[38;5;0m"
ReSs1 = "\u001b[38;5;1m"
ReSs2 = "\u001b[38;5;2m"
ReSs3 = "\u001b[38;5;3m"
ReSs4 = "\u001b[38;5;4m"
ReSs5 = "\u001b[38;5;5m"
ReSs6 = "\u001b[38;5;6m"
ReSs7 = "\u001b[38;5;7m"
ReSs8 = "\u001b[38;5;8m"
ReSs9 = "\u001b[38;5;9m"
ReSs10 = "\u001b[38;5;10m"
ReSs11 = "\u001b[38;5;11m"
ReSs12 = "\u001b[38;5;12m"
ReSs13 = "\u001b[38;5;13m"
ReSs14 = "\u001b[38;5;14m"
ReSs15 = "\u001b[38;5;15m"
ReSs16 = "\u001b[38;5;16m"
ReSs17 = "\u001b[38;5;17m"
ReSs18 = "\u001b[38;5;18m"
ReSs19 = "\u001b[38;5;19m"
ReSs20 = "\u001b[38;5;20m"
ReSs21 = "\u001b[38;5;21m"
ReSs22 = "\u001b[38;5;22m"
ReSs23 = "\u001b[38;5;23m"
ReSs24 = "\u001b[38;5;24m"
ReSs25 = "\u001b[38;5;25m"
ReSs26 = "\u001b[38;5;26m"
ReSs27 = "\u001b[38;5;27m"
ReSs28 = "\u001b[38;5;28m"
ReSs29 = "\u001b[38;5;29m"
ReSs30 = "\u001b[38;5;30m"
ReSs31 = "\u001b[38;5;31m"
ReSs32 = "\u001b[38;5;32m"
ReSs33 = "\u001b[38;5;33m"
ReSs34 = "\u001b[38;5;34m"
ReSs35 = "\u001b[38;5;35m"
ReSs36 = "\u001b[38;5;36m"
ReSs37 = "\u001b[38;5;37m"
ReSs38 = "\u001b[38;5;38m"
ReSs39 = "\u001b[38;5;39m"
ReSs40 = "\u001b[38;5;40m"
ReSs41 = "\u001b[38;5;41m"
ReSs42 = "\u001b[38;5;42m"
ReSs43 = "\u001b[38;5;43m"
ReSs44 = "\u001b[38;5;44m"
ReSs45 = "\u001b[38;5;45m"
ReSs46 = "\u001b[38;5;46m"
ReSs47 = "\u001b[38;5;47m"
ReSs48 = "\u001b[38;5;48m"
ReSs49 = "\u001b[38;5;49m"
ReSs50 = "\u001b[38;5;50m"
ReSs51 = "\u001b[38;5;51m"
ReSs52 = "\u001b[38;5;52m"
ReSs53 = "\u001b[38;5;53m"
ReSs54 = "\u001b[38;5;54m"
ReSs55 = "\u001b[38;5;55m"
ReSs56 = "\u001b[38;5;56m"
ReSs57 = "\u001b[38;5;57m"
ReSs58 = "\u001b[38;5;58m"
ReSs59 = "\u001b[38;5;59m"
ReSs60 = "\u001b[38;5;60m"
ReSs61 = "\u001b[38;5;61m"
ReSs62 = "\u001b[38;5;62m"
ReSs63 = "\u001b[38;5;63m"
ReSs64 = "\u001b[38;5;64m"
ReSs65 = "\u001b[38;5;65m"
ReSs66 = "\u001b[38;5;66m"
ReSs67 = "\u001b[38;5;67m"
ReSs68 = "\u001b[38;5;68m"
ReSs69 = "\u001b[38;5;69m"
ReSs70 = "\u001b[38;5;70m"
ReSs71 = "\u001b[38;5;71m"
ReSs72 = "\u001b[38;5;72m"
ReSs73 = "\u001b[38;5;73m"
ReSs74 = "\u001b[38;5;74m"
ReSs75 = "\u001b[38;5;75m"
ReSs76 = "\u001b[38;5;76m"
ReSs77 = "\u001b[38;5;77m"
ReSs78 = "\u001b[38;5;78m"
ReSs79 = "\u001b[38;5;79m"
ReSs80 = "\u001b[38;5;80m"
ReSs81 = "\u001b[38;5;81m"
ReSs82 = "\u001b[38;5;82m"
ReSs83 = "\u001b[38;5;83m"
ReSs84 = "\u001b[38;5;84m"
ReSs85 = "\u001b[38;5;85m"
ReSs86 = "\u001b[38;5;86m"
ReSs87 = "\u001b[38;5;87m"
ReSs88 = "\u001b[38;5;88m"
ReSs89 = "\u001b[38;5;89m"
ReSs90 = "\u001b[38;5;90m"
ReSs91 = "\u001b[38;5;91m"
ReSs92 = "\u001b[38;5;92m"
ReSs93 = "\u001b[38;5;93m"
ReSs94 = "\u001b[38;5;94m"
ReSs95 = "\u001b[38;5;95m"
ReSs96 = "\u001b[38;5;96m"
ReSs97 = "\u001b[38;5;97m"
ReSs98 = "\u001b[38;5;98m"
ReSs99 = "\u001b[38;5;99m"
ReSs100 = "\u001b[38;5;100m"
ReSs101 = "\u001b[38;5;101m"
ReSs102 = "\u001b[38;5;102m"
ReSs103 = "\u001b[38;5;103m"
ReSs104 = "\u001b[38;5;104m"
ReSs105 = "\u001b[38;5;105m"
ReSs106 = "\u001b[38;5;106m"
ReSs107 = "\u001b[38;5;107m"
ReSs108 = "\u001b[38;5;108m"
ReSs109 = "\u001b[38;5;109m"
ReSs110 = "\u001b[38;5;110m"
ReSs111 = "\u001b[38;5;111m"
ReSs112 = "\u001b[38;5;112m"
ReSs113 = "\u001b[38;5;113m"
ReSs114 = "\u001b[38;5;114m"
ReSs115 = "\u001b[38;5;115m"
ReSs116 = "\u001b[38;5;116m"
ReSs117 = "\u001b[38;5;117m"
ReSs118 = "\u001b[38;5;118m"
ReSs119 = "\u001b[38;5;119m"
ReSs120 = "\u001b[38;5;120m"
ReSs121 = "\u001b[38;5;121m"
ReSs122 = "\u001b[38;5;122m"
ReSs123 = "\u001b[38;5;123m"
ReSs124 = "\u001b[38;5;124m"
ReSs125 = "\u001b[38;5;125m"
ReSs126 = "\u001b[38;5;126m"
ReSs127 = "\u001b[38;5;127m"
ReSs128 = "\u001b[38;5;128m"
ReSs129 = "\u001b[38;5;129m"
ReSs130 = "\u001b[38;5;130m"
ReSs131 = "\u001b[38;5;131m"
ReSs132 = "\u001b[38;5;132m"
ReSs133 = "\u001b[38;5;133m"
ReSs134 = "\u001b[38;5;134m"
ReSs135 = "\u001b[38;5;135m"
ReSs136 = "\u001b[38;5;136m"
ReSs137 = "\u001b[38;5;137m"
ReSs138 = "\u001b[38;5;138m"
ReSs139 = "\u001b[38;5;139m"
ReSs140 = "\u001b[38;5;140m"
ReSs141 = "\u001b[38;5;141m"
ReSs142 = "\u001b[38;5;142m"
ReSs143 = "\u001b[38;5;143m"
ReSs144 = "\u001b[38;5;144m"
ReSs145 = "\u001b[38;5;145m"
ReSs146 = "\u001b[38;5;146m"
ReSs147 = "\u001b[38;5;147m"
ReSs148 = "\u001b[38;5;148m"
ReSs149 = "\u001b[38;5;149m"
ReSs150 = "\u001b[38;5;150m"
ReSs151 = "\u001b[38;5;151m"
ReSs152 = "\u001b[38;5;152m"
ReSs153 = "\u001b[38;5;153m"
ReSs154 = "\u001b[38;5;154m"
ReSs155 = "\u001b[38;5;155m"
ReSs156 = "\u001b[38;5;156m"
ReSs157 = "\u001b[38;5;157m"
ReSs158 = "\u001b[38;5;158m"
ReSs159 = "\u001b[38;5;159m"
ReSs160 = "\u001b[38;5;160m"
ReSs161 = "\u001b[38;5;161m"
ReSs162 = "\u001b[38;5;162m"
ReSs163 = "\u001b[38;5;163m"
ReSs164 = "\u001b[38;5;164m"
ReSs165 = "\u001b[38;5;165m"
ReSs166 = "\u001b[38;5;166m"
ReSs167 = "\u001b[38;5;167m"
ReSs168 = "\u001b[38;5;168m"
ReSs169 = "\u001b[38;5;169m"
ReSs170 = "\u001b[38;5;170m"
ReSs171 = "\u001b[38;5;171m"
ReSs172 = "\u001b[38;5;172m"
ReSs173 = "\u001b[38;5;173m"
ReSs174 = "\u001b[38;5;174m"
ReSs175 = "\u001b[38;5;175m"
ReSs176 = "\u001b[38;5;176m"
ReSs177 = "\u001b[38;5;177m"
ReSs178 = "\u001b[38;5;178m"
ReSs179 = "\u001b[38;5;179m"
ReSs180 = "\u001b[38;5;180m"
ReSs181 = "\u001b[38;5;181m"
ReSs182 = "\u001b[38;5;182m"
ReSs183 = "\u001b[38;5;183m"
ReSs184 = "\u001b[38;5;184m"
ReSs185 = "\u001b[38;5;185m"
ReSs186 = "\u001b[38;5;186m"
ReSs187 = "\u001b[38;5;187m"
ReSs188 = "\u001b[38;5;188m"
ReSs189 = "\u001b[38;5;189m"
ReSs190 = "\u001b[38;5;190m"
ReSs191 = "\u001b[38;5;191m"
ReSs192 = "\u001b[38;5;192m"
ReSs193 = "\u001b[38;5;193m"
ReSs194 = "\u001b[38;5;194m"
ReSs195 = "\u001b[38;5;195m"
ReSs196 = "\u001b[38;5;196m"
ReSs197 = "\u001b[38;5;197m"
ReSs198 = "\u001b[38;5;198m"
ReSs199 = "\u001b[38;5;199m"
ReSs200 = "\u001b[38;5;200m"
ReSs201 = "\u001b[38;5;201m"
ReSs202 = "\u001b[38;5;202m"
ReSs203 = "\u001b[38;5;203m"
ReSs204 = "\u001b[38;5;204m"
ReSs205 = "\u001b[38;5;205m"
ReSs206 = "\u001b[38;5;206m"
ReSs207 = "\u001b[38;5;207m"
ReSs208 = "\u001b[38;5;208m"
ReSs209 = "\u001b[38;5;209m"
ReSs210 = "\u001b[38;5;210m"
ReSs211 = "\u001b[38;5;211m"
ReSs212 = "\u001b[38;5;212m"
ReSs213 = "\u001b[38;5;213m"
ReSs214 = "\u001b[38;5;214m"
ReSs215 = "\u001b[38;5;215m"
ReSs216 = "\u001b[38;5;216m"
ReSs217 = "\u001b[38;5;217m"
ReSs218 = "\u001b[38;5;218m"
ReSs219 = "\u001b[38;5;219m"
ReSs220 = "\u001b[38;5;220m"
ReSs221 = "\u001b[38;5;221m"
ReSs222 = "\u001b[38;5;222m"
ReSs223 = "\u001b[38;5;223m"
ReSs224 = "\u001b[38;5;224m"
ReSs225 = "\u001b[38;5;225m"
ReSs226 = "\u001b[38;5;226m"
ReSs227 = "\u001b[38;5;227m"
ReSs228 = "\u001b[38;5;228m"
ReSs229 = "\u001b[38;5;229m"
ReSs230 = "\u001b[38;5;230m"
ReSs231 = "\u001b[38;5;231m"
ReSs232 = "\u001b[38;5;232m"
ReSs233 = "\u001b[38;5;233m"
ReSs234 = "\u001b[38;5;234m"
ReSs235 = "\u001b[38;5;235m"
ReSs236 = "\u001b[38;5;236m"
ReSs237 = "\u001b[38;5;237m"
ReSs238 = "\u001b[38;5;238m"
ReSs239 = "\u001b[38;5;239m"
ReSs240 = "\u001b[38;5;240m"
ReSs241 = "\u001b[38;5;241m"
ReSs242 = "\u001b[38;5;242m"
ReSs243 = "\u001b[38;5;243m"
ReSs244 = "\u001b[38;5;244m"
ReSs245 = "\u001b[38;5;245m"
ReSs246 = "\u001b[38;5;246m"
ReSs247 = "\u001b[38;5;247m"
ReSs248 = "\u001b[38;5;248m"
ReSs249 = "\u001b[38;5;249m"
ReSs250 = "\u001b[38;5;250m"
ReSs251 = "\u001b[38;5;251m"
ReSs252 = "\u001b[38;5;252m"
ReSs253 = "\u001b[38;5;253m"
ReSs254 = "\u001b[38;5;254m"
###
A = "\x1b[0;90m"     # Hitam
B = "\x1b[38;5;196m" # Merah
C = "\x1b[38;5;46m"  # Hijau
D = "\x1b[38;5;226m" # Kuning
E = "\x1b[38;5;44m"  # Biru
F = "\x1b[38;5;231m" # Putih
G = "\x1b[38;5;248m" 
H = '\x1b[38;5;208m'
I ='\033[1;37m'
O = '\033[31;1m'
P = '\033[32;1m'
V = '\033[33;1m'
U = '\033[34;1m'
N = '\033[35;1m'
K = '\033[36;1m'
LR = '\033[91;1m'
LG = '\033[92;1m'
LY = '\033[93;1m'
LB = '\033[94;1m'
LM = '\033[95;1m'
LC = '\033[96;1m'
xxh = '\x1b[38;5;208m'#برتقالي
r1='\x1b[38;5;8m'#رمادي
m1='\x1b[38;5;196m'#احمر
a1 = '\x1b[1;31m'  # أحمر
a2 = '\x1b[1;34m'  # أزرق
a3 = '\x1b[1;32m'  # أخضر
a4 = '\x1b[1;33m'  # أصفر
a5 = '\x1b[38;5;208m'  # برتقالي
a6 = '\x1b[38;5;5m'  # أرجواني
a7 = '\x1b[38;5;13m'  # وردي
a8 = '\x1b[1;30m'  # أسود
a9 = '\x1b[1;37m'  # أبيض
a10 = '\x1b[38;5;52m'  # بني
a11 = '\x1b[38;5;8m'  # رمادي
a12 = '\x1b[38;5;220m'  # ذهبي
a13 = '\x1b[38;5;7m'  # فضي
a14 = '\x1b[38;5;153m'  # أزرق فاتح
a15 = '\x1b[38;5;18m'  # أزرق داكن
a16 = '\x1b[38;5;48m'  # أخضر فاتح
a17 = '\x1b[38;5;22m'  # أخضر داكن
a18 = '\x1b[38;5;196m'  # أحمر فاتح
a19 = '\x1b[38;5;88m'  # أحمر داكن
a20 = '\x1b[38;5;226m'  # أصفر فاتح
a21 = '\x1b[38;5;136m'  # أصفر داكن
a22 = '\x1b[38;5;216m'  # برتقالي فاتح
a23 = '\x1b[38;5;166m'  # برتقالي داكن
a25 = '\x1b[38;5;91m'  # أرجواني داكن
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي
####
E = '\033[1;31m'
G = '\033[1;35m'
Z = '\033[1;31m'  # احمر
X = '\033[1;33m'  # اصفر
Z1 = '\033[2;31m'  # احمر ثاني
F = '\033[2;32m'  # اخضر
A = '\033[2;34m'  # ازرق
C = '\033[2;35m'  # وردي
B = '\x1b[38;5;208m'  # برتقالي
Y = '\033[1;34m'  # ازرق فاتح
M = '\x1b[1;37m'  # ابیض
S = '\033[1;33m'
U = '\x1b[1;37m'  # ابیض
BRed = '\x1b[1;31m'
BGreen = '\x1b[1;32m'
BYellow = '\x1b[1;33m'
R = '\x1b[1;34m'
BPurple = '\x1b[1;35m'
BCyan = '\x1b[1;36m'
BWhite = '\x1b[1;37m'
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = "\033[1;30m"
sir = '\033[41m\x1b[1;97m'
x = '\33[m' # DEFAULT
m = '\x1b[1;91m' #RED +
k = '\033[93m' # KUNING +
h = '\x1b[1;92m' # HIJAU +
hh = '\033[32m' # HIJAU -
u = '\033[95m' # UNGU
kk = '\033[33m' # KUNING -
b = '\33[1;96m' # BIRU -
p = '\x1b[0;34m' # BIRU +
#asu = random.choice([m,k,h,u,b])
AB_A='\x1b[1;97m' # ابيض خط عربض
RS='\x1b[30m' #رصاصي
AH_F='\x1b[31m'   #احمر فاتح
AKH_F='\x1b[32m' #اخضر فاتح
AS_T='\x1b[33m'#اصفر طوخ
SM='\x1b[34m'  #سمائي
BN='\x1b[35m'#بنفسجي
AZ_T='\x1b[36m'  #ازرك طوخ
AB_KH='\x1b[37m' #ابيض خط خفيف
AH_T='\x1b[91m'  #احمر طوخ
AKH_T='\x1b[92m'#اخضر طوخ
AS_F='\x1b[93m'    #اصفر فاتح
WR='\x1b[95m'      #وردي
p='\x1b[38;5;208m' #برتقالي
AH2='\x1b[38;5;204m'
AS2='\x1b[38;5;220m'
MJ='\x1b[38;5;193m'
MJ2='\x1b[38;5;216m'
MJ3='\x1b[38;5;190m'
O='\x1b[0;96m'     # Biru Muda
P='\x1b[38;5;231m' # Putih
J='\x1b[38;5;208m' # Jingga
MJ4='\x1b[38;5;106m'
Z = '\033[1;31m' #احمر
R = '\033[1;31m' #احمر
X = '\033[1;33m' #اصفر
F = '\033[2;32m' #اخضر
C = "\033[1;97m" #ابيض
B = '\033[2;36m'#سمائي
Y = '\033[1;34m' #ازرق فاتح.
E = '\033[1;31m'
B = '\033[2;36m'
G = '\033[1;32m'
S = '\033[1;33m'
color0 = "\u001b[38;5;0m"
color1 = "\u001b[38;5;1m"
color2 = "\u001b[38;5;2m"
color3 = "\u001b[38;5;3m"
color4 = "\u001b[38;5;4m"
color5 = "\u001b[38;5;5m"
color6 = "\u001b[38;5;6m"
color7 = "\u001b[38;5;7m"
color8 = "\u001b[38;5;8m"
color9 = "\u001b[38;5;9m"
color10 = "\u001b[38;5;10m"
color11 = "\u001b[38;5;11m"
color12 = "\u001b[38;5;12m"
color13 = "\u001b[38;5;13m"
color14 = "\u001b[38;5;14m"
color15 = "\u001b[38;5;15m"
color16 = "\u001b[38;5;16m"
color17 = "\u001b[38;5;17m"
color18 = "\u001b[38;5;18m"
color19 = "\u001b[38;5;19m"
color20 = "\u001b[38;5;20m"
color21 = "\u001b[38;5;21m"
color22 = "\u001b[38;5;22m"
color23 = "\u001b[38;5;23m"
color24 = "\u001b[38;5;24m"
color25 = "\u001b[38;5;25m"
color26 = "\u001b[38;5;26m"
color27 = "\u001b[38;5;27m"
color28 = "\u001b[38;5;28m"
color29 = "\u001b[38;5;29m"
color30 = "\u001b[38;5;30m"
color31 = "\u001b[38;5;31m"
color32 = "\u001b[38;5;32m"
color33 = "\u001b[38;5;33m"
color34 = "\u001b[38;5;34m"
color35 = "\u001b[38;5;35m"
color36 = "\u001b[38;5;36m"
color37 = "\u001b[38;5;37m"
color38 = "\u001b[38;5;38m"
color39 = "\u001b[38;5;39m"
color40 = "\u001b[38;5;40m"
color41 = "\u001b[38;5;41m"
color42 = "\u001b[38;5;42m"
color43 = "\u001b[38;5;43m"
color44 = "\u001b[38;5;44m"
color45 = "\u001b[38;5;45m"
color46 = "\u001b[38;5;46m"
color47 = "\u001b[38;5;47m"
color48 = "\u001b[38;5;48m"
color49 = "\u001b[38;5;49m"
color50 = "\u001b[38;5;50m"
color51 = "\u001b[38;5;51m"
color52 = "\u001b[38;5;52m"
color53 = "\u001b[38;5;53m"
color54 = "\u001b[38;5;54m"
color55 = "\u001b[38;5;55m"
color56 = "\u001b[38;5;56m"
color57 = "\u001b[38;5;57m"
color58 = "\u001b[38;5;58m"
color59 = "\u001b[38;5;59m"
color60 = "\u001b[38;5;60m"
color61 = "\u001b[38;5;61m"
color62 = "\u001b[38;5;62m"
color63 = "\u001b[38;5;63m"
color64 = "\u001b[38;5;64m"
color65 = "\u001b[38;5;65m"
color66 = "\u001b[38;5;66m"
color67 = "\u001b[38;5;67m"
color68 = "\u001b[38;5;68m"
color69 = "\u001b[38;5;69m"
color70 = "\u001b[38;5;70m"
color71 = "\u001b[38;5;71m"
color72 = "\u001b[38;5;72m"
color73 = "\u001b[38;5;73m"
color74 = "\u001b[38;5;74m"
color75 = "\u001b[38;5;75m"
color76 = "\u001b[38;5;76m"
color77 = "\u001b[38;5;77m"
color78 = "\u001b[38;5;78m"
color79 = "\u001b[38;5;79m"
color80 = "\u001b[38;5;80m"
color81 = "\u001b[38;5;81m"
color82 = "\u001b[38;5;82m"
color83 = "\u001b[38;5;83m"
color84 = "\u001b[38;5;84m"
color85 = "\u001b[38;5;85m"
color86 = "\u001b[38;5;86m"
color87 = "\u001b[38;5;87m"
color88 = "\u001b[38;5;88m"
color89 = "\u001b[38;5;89m"
color90 = "\u001b[38;5;90m"
color91 = "\u001b[38;5;91m"
color92 = "\u001b[38;5;92m"
color93 = "\u001b[38;5;93m"
color94 = "\u001b[38;5;94m"
color95 = "\u001b[38;5;95m"
color96 = "\u001b[38;5;96m"
color97 = "\u001b[38;5;97m"
color98 = "\u001b[38;5;98m"
color99 = "\u001b[38;5;99m"
color100 = "\u001b[38;5;100m"
color101 = "\u001b[38;5;101m"
color102 = "\u001b[38;5;102m"
color103 = "\u001b[38;5;103m"
color104 = "\u001b[38;5;104m"
color105 = "\u001b[38;5;105m"
color106 = "\u001b[38;5;106m"
color107 = "\u001b[38;5;107m"
color108 = "\u001b[38;5;108m"
color109 = "\u001b[38;5;109m"
color110 = "\u001b[38;5;110m"
color111 = "\u001b[38;5;111m"
color112 = "\u001b[38;5;112m"
color113 = "\u001b[38;5;113m"
color114 = "\u001b[38;5;114m"
color115 = "\u001b[38;5;115m"
color116 = "\u001b[38;5;116m"
color117 = "\u001b[38;5;117m"
color118 = "\u001b[38;5;118m"
color119 = "\u001b[38;5;119m"
color120 = "\u001b[38;5;120m"
color121 = "\u001b[38;5;121m"
color122 = "\u001b[38;5;122m"
color123 = "\u001b[38;5;123m"
color124 = "\u001b[38;5;124m"
color125 = "\u001b[38;5;125m"
color126 = "\u001b[38;5;126m"
color127 = "\u001b[38;5;127m"
color128 = "\u001b[38;5;128m"
color129 = "\u001b[38;5;129m"
color130 = "\u001b[38;5;130m"
color131 = "\u001b[38;5;131m"
color132 = "\u001b[38;5;132m"
color133 = "\u001b[38;5;133m"
color134 = "\u001b[38;5;134m"
color135 = "\u001b[38;5;135m"
color136 = "\u001b[38;5;136m"
color137 = "\u001b[38;5;137m"
color138 = "\u001b[38;5;138m"
color139 = "\u001b[38;5;139m"
color140 = "\u001b[38;5;140m"
color141 = "\u001b[38;5;141m"
color142 = "\u001b[38;5;142m"
color143 = "\u001b[38;5;143m"
color144 = "\u001b[38;5;144m"
color145 = "\u001b[38;5;145m"
color146 = "\u001b[38;5;146m"
color147 = "\u001b[38;5;147m"
color148 = "\u001b[38;5;148m"
color149 = "\u001b[38;5;149m"
color150 = "\u001b[38;5;150m"
color151 = "\u001b[38;5;151m"
color152 = "\u001b[38;5;152m"
color153 = "\u001b[38;5;153m"
color154 = "\u001b[38;5;154m"
color155 = "\u001b[38;5;155m"
color156 = "\u001b[38;5;156m"
color157 = "\u001b[38;5;157m"
color158 = "\u001b[38;5;158m"
color159 = "\u001b[38;5;159m"
color160 = "\u001b[38;5;160m"
color161 = "\u001b[38;5;161m"
color162 = "\u001b[38;5;162m"
color163 = "\u001b[38;5;163m"
color164 = "\u001b[38;5;164m"
color165 = "\u001b[38;5;165m"
color166 = "\u001b[38;5;166m"
color167 = "\u001b[38;5;167m"
color168 = "\u001b[38;5;168m"
color169 = "\u001b[38;5;169m"
color170 = "\u001b[38;5;170m"
color171 = "\u001b[38;5;171m"
color172 = "\u001b[38;5;172m"
color173 = "\u001b[38;5;173m"
color174 = "\u001b[38;5;174m"
color175 = "\u001b[38;5;175m"
color176 = "\u001b[38;5;176m"
color177 = "\u001b[38;5;177m"
color178 = "\u001b[38;5;178m"
color179 = "\u001b[38;5;179m"
color180 = "\u001b[38;5;180m"
color181 = "\u001b[38;5;181m"
color182 = "\u001b[38;5;182m"
color183 = "\u001b[38;5;183m"
color184 = "\u001b[38;5;184m"
color185 = "\u001b[38;5;185m"
color186 = "\u001b[38;5;186m"
color187 = "\u001b[38;5;187m"
color188 = "\u001b[38;5;188m"
color189 = "\u001b[38;5;189m"
color190 = "\u001b[38;5;190m"
color191 = "\u001b[38;5;191m"
color192 = "\u001b[38;5;192m"
color193 = "\u001b[38;5;193m"
color194 = "\u001b[38;5;194m"
color195 = "\u001b[38;5;195m"
color196 = "\u001b[38;5;196m"
color197 = "\u001b[38;5;197m"
color198 = "\u001b[38;5;198m"
color199 = "\u001b[38;5;199m"
color200 = "\u001b[38;5;200m"
color201 = "\u001b[38;5;201m"
color202 = "\u001b[38;5;202m"
color203 = "\u001b[38;5;203m"
color204 = "\u001b[38;5;204m"
color205 = "\u001b[38;5;205m"
color206 = "\u001b[38;5;206m"
color207 = "\u001b[38;5;207m"
color208 = "\u001b[38;5;208m"
color209 = "\u001b[38;5;209m"
color210 = "\u001b[38;5;210m"
color211 = "\u001b[38;5;211m"
color212 = "\u001b[38;5;212m"
color213 = "\u001b[38;5;213m"
color214 = "\u001b[38;5;214m"
color215 = "\u001b[38;5;215m"
color216 = "\u001b[38;5;216m"
color217 = "\u001b[38;5;217m"
color218 = "\u001b[38;5;218m"
color219 = "\u001b[38;5;219m"
color220 = "\u001b[38;5;220m"
color221 = "\u001b[38;5;221m"
color222 = "\u001b[38;5;222m"
color223 = "\u001b[38;5;223m"
color224 = "\u001b[38;5;224m"
color225 = "\u001b[38;5;225m"
color226 = "\u001b[38;5;226m"
color227 = "\u001b[38;5;227m"
color228 = "\u001b[38;5;228m"
color229 = "\u001b[38;5;229m"
color230 = "\u001b[38;5;230m"
color231 = "\u001b[38;5;231m"
color232 = "\u001b[38;5;232m"
color233 = "\u001b[38;5;233m"
color234 = "\u001b[38;5;234m"
color235 = "\u001b[38;5;235m"
color236 = "\u001b[38;5;236m"
color237 = "\u001b[38;5;237m"
color238 = "\u001b[38;5;238m"
color239 = "\u001b[38;5;239m"
color240 = "\u001b[38;5;240m"
color241 = "\u001b[38;5;241m"
color242 = "\u001b[38;5;242m"
color243 = "\u001b[38;5;243m"
color244 = "\u001b[38;5;244m"
color245 = "\u001b[38;5;245m"
color246 = "\u001b[38;5;246m"
color247 = "\u001b[38;5;247m"
color248 = "\u001b[38;5;248m"
color249 = "\u001b[38;5;249m"
color250 = "\u001b[38;5;250m"
color251 = "\u001b[38;5;251m"
color252 = "\u001b[38;5;252m"
color253 = "\u001b[38;5;253m"
color254 = "\u001b[38;5;254m"
color255 = "\u001b[38;5;255m"
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = "\033[1;30m"
x = '\33[m' # DEFAULT
m = '\x1b[1;91m' #RED +
k = '\x1b[38;5;208m' # KUNING +
h = '\x1b[38;5;204m' # HIJAU +
hh = '\x1b[38;5;220m' # HIJAU -
u = '\x1b[38;5;193m' # UNGU
kk = '\x1b[38;5;216m' # KUNING -
b = '\x1b[38;5;190m' # BIRU -
p = '\x1b[38;5;106m' # BIRU +
a10 = '\x1b[38;5;52m'  # بني
a11 = '\x1b[38;5;8m'  # رمادي
a12 = '\x1b[38;5;220m'  # ذهبي
a13 = '\x1b[38;5;7m'  # فضي
a14 = '\x1b[38;5;153m'  # أزرق فاتح
a15 = '\x1b[38;5;18m'  # أزرق داكن
a16 = '\x1b[38;5;48m'  # أخضر فاتح
a17 = '\x1b[38;5;22m'  # أخضر داكن
a18 = '\x1b[38;5;196m'  # أحمر فاتح
a19 = '\x1b[38;5;88m'  # أحمر داكن
a20 = '\x1b[38;5;226m'  # أصفر فاتح
a21 = '\x1b[38;5;136m'  # أصفر داكن
a22 = '\x1b[38;5;216m'  # برتقالي فات
a23 = '\x1b[38;5;166m'  # برتقالي داكن
a24 = '\x1b[38;5;234m'  # أرجواني فاتح
a25 = '\x1b[38;5;91m'  # أرجواني داكن
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق فاتح
###
G2 = ('\x1b[1;32m') # اخضر
G1 = '\x1b[1;97m' # ابيض
G2 = '\x1b[38;5;196m' # برتقالي
G3 = '\x1b[1;33m' # اصفر
G4 = '\x1b[1;96m'# سمائي
G5 = '\x1b[38;5;8m'#رصاصي
G6 = '\x1b[38;5;48m' # اخضر مميز 45%
G7 = '\x1b[38;5;47m' # اخضر HD
G8 = '\x1b[38;5;49m' # سمائي + اخضر
G9 = '\x1b[38;5;50m' # سمائي + اخضر HD
G10 = '\x1b[1;34m' # ازرق
G11 = '\x1b[38;5;14m' # سمائي خفيف
G12 = '\x1b[38;5;123m' # سمائي فقط 
G13 = '\x1b[38;5;122m'# سمائي بجودة عالية
G14 = '\x1b[38;5;86m'# سمائي مميز
G14 = '\x1b[38;5;121m' # وردي
G15 = '\x1b[38;5;205m' # برتقالي غامق
G16 = '\x1b[1;92m\x1b[38;5;208m'# برتقالي فاتح
G17 = '\x1b[1;92m\x1b[38;5;209m'# برتقالي + وردي 35%
G18 = '\x1b[1;92m\x1b[38;5;210m'# برتقالي + وردي 66%
G19 = '\x1b[1;92m\x1b[38;5;211m'# وردي فاتح
G20 = '\x1b[1;92m\x1b[38;5;212m'# اخضر غامق
G21 = '\x1b[1;92m\x1b[38;5;46m' # اخضر  غامق 50%
G23 = '\x1b[1;92m\x1b[38;5;47m' # اخضر خفيف
G24 = '\x1b[1;92m\x1b[38;5;48m'# اخضر فاتح 50%
G25 = '\x1b[1;92m\x1b[38;5;49m' # سمائي 
G26 = '\x1b[1;92m\x1b[38;5;50m'# سمائي مميز 2
###
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي
###
ReSs0 = "\u001b[38;5;0m"
ReSs1 = "\u001b[38;5;1m"
ReSs2 = "\u001b[38;5;2m"
ReSs3 = "\u001b[38;5;3m"
ReSs4 = "\u001b[38;5;4m"
ReSs5 = "\u001b[38;5;5m"
ReSs6 = "\u001b[38;5;6m"
ReSs7 = "\u001b[38;5;7m"
ReSs8 = "\u001b[38;5;8m"
ReSs9 = "\u001b[38;5;9m"
ReSs10 = "\u001b[38;5;10m"
ReSs11 = "\u001b[38;5;11m"
ReSs12 = "\u001b[38;5;12m"
ReSs13 = "\u001b[38;5;13m"
ReSs14 = "\u001b[38;5;14m"
ReSs15 = "\u001b[38;5;15m"
ReSs16 = "\u001b[38;5;16m"
ReSs17 = "\u001b[38;5;17m"
ReSs18 = "\u001b[38;5;18m"
ReSs19 = "\u001b[38;5;19m"
ReSs20 = "\u001b[38;5;20m"
ReSs21 = "\u001b[38;5;21m"
ReSs22 = "\u001b[38;5;22m"
ReSs23 = "\u001b[38;5;23m"
ReSs24 = "\u001b[38;5;24m"
ReSs25 = "\u001b[38;5;25m"
ReSs26 = "\u001b[38;5;26m"
ReSs27 = "\u001b[38;5;27m"
ReSs28 = "\u001b[38;5;28m"
ReSs29 = "\u001b[38;5;29m"
ReSs30 = "\u001b[38;5;30m"
ReSs31 = "\u001b[38;5;31m"
ReSs32 = "\u001b[38;5;32m"
ReSs33 = "\u001b[38;5;33m"
ReSs34 = "\u001b[38;5;34m"
ReSs35 = "\u001b[38;5;35m"
ReSs36 = "\u001b[38;5;36m"
ReSs37 = "\u001b[38;5;37m"
ReSs38 = "\u001b[38;5;38m"
ReSs39 = "\u001b[38;5;39m"
ReSs40 = "\u001b[38;5;40m"
ReSs41 = "\u001b[38;5;41m"
ReSs42 = "\u001b[38;5;42m"
ReSs43 = "\u001b[38;5;43m"
ReSs44 = "\u001b[38;5;44m"
ReSs45 = "\u001b[38;5;45m"
ReSs46 = "\u001b[38;5;46m"
ReSs47 = "\u001b[38;5;47m"
ReSs48 = "\u001b[38;5;48m"
ReSs49 = "\u001b[38;5;49m"
ReSs50 = "\u001b[38;5;50m"
ReSs51 = "\u001b[38;5;51m"
ReSs52 = "\u001b[38;5;52m"
ReSs53 = "\u001b[38;5;53m"
ReSs54 = "\u001b[38;5;54m"
ReSs55 = "\u001b[38;5;55m"
ReSs56 = "\u001b[38;5;56m"
ReSs57 = "\u001b[38;5;57m"
ReSs58 = "\u001b[38;5;58m"
ReSs59 = "\u001b[38;5;59m"
ReSs60 = "\u001b[38;5;60m"
ReSs61 = "\u001b[38;5;61m"
ReSs62 = "\u001b[38;5;62m"
ReSs63 = "\u001b[38;5;63m"
ReSs64 = "\u001b[38;5;64m"
ReSs65 = "\u001b[38;5;65m"
ReSs66 = "\u001b[38;5;66m"
ReSs67 = "\u001b[38;5;67m"
ReSs68 = "\u001b[38;5;68m"
ReSs69 = "\u001b[38;5;69m"
ReSs70 = "\u001b[38;5;70m"
ReSs71 = "\u001b[38;5;71m"
ReSs72 = "\u001b[38;5;72m"
ReSs73 = "\u001b[38;5;73m"
ReSs74 = "\u001b[38;5;74m"
ReSs75 = "\u001b[38;5;75m"
ReSs76 = "\u001b[38;5;76m"
ReSs77 = "\u001b[38;5;77m"
ReSs78 = "\u001b[38;5;78m"
ReSs79 = "\u001b[38;5;79m"
ReSs80 = "\u001b[38;5;80m"
ReSs81 = "\u001b[38;5;81m"
ReSs82 = "\u001b[38;5;82m"
ReSs83 = "\u001b[38;5;83m"
ReSs84 = "\u001b[38;5;84m"
ReSs85 = "\u001b[38;5;85m"
ReSs86 = "\u001b[38;5;86m"
ReSs87 = "\u001b[38;5;87m"
ReSs88 = "\u001b[38;5;88m"
ReSs89 = "\u001b[38;5;89m"
ReSs90 = "\u001b[38;5;90m"
ReSs91 = "\u001b[38;5;91m"
ReSs92 = "\u001b[38;5;92m"
ReSs93 = "\u001b[38;5;93m"
ReSs94 = "\u001b[38;5;94m"
ReSs95 = "\u001b[38;5;95m"
ReSs96 = "\u001b[38;5;96m"
ReSs97 = "\u001b[38;5;97m"
ReSs98 = "\u001b[38;5;98m"
ReSs99 = "\u001b[38;5;99m"
ReSs100 = "\u001b[38;5;100m"
ReSs101 = "\u001b[38;5;101m"
ReSs102 = "\u001b[38;5;102m"
ReSs103 = "\u001b[38;5;103m"
ReSs104 = "\u001b[38;5;104m"
ReSs105 = "\u001b[38;5;105m"
ReSs106 = "\u001b[38;5;106m"
ReSs107 = "\u001b[38;5;107m"
ReSs108 = "\u001b[38;5;108m"
ReSs109 = "\u001b[38;5;109m"
ReSs110 = "\u001b[38;5;110m"
ReSs111 = "\u001b[38;5;111m"
ReSs112 = "\u001b[38;5;112m"
ReSs113 = "\u001b[38;5;113m"
ReSs114 = "\u001b[38;5;114m"
ReSs115 = "\u001b[38;5;115m"
ReSs116 = "\u001b[38;5;116m"
ReSs117 = "\u001b[38;5;117m"
ReSs118 = "\u001b[38;5;118m"
ReSs119 = "\u001b[38;5;119m"
ReSs120 = "\u001b[38;5;120m"
ReSs121 = "\u001b[38;5;121m"
ReSs122 = "\u001b[38;5;122m"
ReSs123 = "\u001b[38;5;123m"
ReSs124 = "\u001b[38;5;124m"
ReSs125 = "\u001b[38;5;125m"
ReSs126 = "\u001b[38;5;126m"
ReSs127 = "\u001b[38;5;127m"
ReSs128 = "\u001b[38;5;128m"
ReSs129 = "\u001b[38;5;129m"
ReSs130 = "\u001b[38;5;130m"
ReSs131 = "\u001b[38;5;131m"
ReSs132 = "\u001b[38;5;132m"
ReSs133 = "\u001b[38;5;133m"
ReSs134 = "\u001b[38;5;134m"
ReSs135 = "\u001b[38;5;135m"
ReSs136 = "\u001b[38;5;136m"
ReSs137 = "\u001b[38;5;137m"
ReSs138 = "\u001b[38;5;138m"
ReSs139 = "\u001b[38;5;139m"
ReSs140 = "\u001b[38;5;140m"
ReSs141 = "\u001b[38;5;141m"
ReSs142 = "\u001b[38;5;142m"
ReSs143 = "\u001b[38;5;143m"
ReSs144 = "\u001b[38;5;144m"
ReSs145 = "\u001b[38;5;145m"
ReSs146 = "\u001b[38;5;146m"
ReSs147 = "\u001b[38;5;147m"
ReSs148 = "\u001b[38;5;148m"
ReSs149 = "\u001b[38;5;149m"
ReSs150 = "\u001b[38;5;150m"
ReSs151 = "\u001b[38;5;151m"
ReSs152 = "\u001b[38;5;152m"
ReSs153 = "\u001b[38;5;153m"
ReSs154 = "\u001b[38;5;154m"
ReSs155 = "\u001b[38;5;155m"
ReSs156 = "\u001b[38;5;156m"
ReSs157 = "\u001b[38;5;157m"
ReSs158 = "\u001b[38;5;158m"
ReSs159 = "\u001b[38;5;159m"
ReSs160 = "\u001b[38;5;160m"
ReSs161 = "\u001b[38;5;161m"
ReSs162 = "\u001b[38;5;162m"
ReSs163 = "\u001b[38;5;163m"
ReSs164 = "\u001b[38;5;164m"
ReSs165 = "\u001b[38;5;165m"
ReSs166 = "\u001b[38;5;166m"
ReSs167 = "\u001b[38;5;167m"
ReSs168 = "\u001b[38;5;168m"
ReSs169 = "\u001b[38;5;169m"
ReSs170 = "\u001b[38;5;170m"
ReSs171 = "\u001b[38;5;171m"
ReSs172 = "\u001b[38;5;172m"
ReSs173 = "\u001b[38;5;173m"
ReSs174 = "\u001b[38;5;174m"
ReSs175 = "\u001b[38;5;175m"
ReSs176 = "\u001b[38;5;176m"
ReSs177 = "\u001b[38;5;177m"
ReSs178 = "\u001b[38;5;178m"
ReSs179 = "\u001b[38;5;179m"
ReSs180 = "\u001b[38;5;180m"
ReSs181 = "\u001b[38;5;181m"
ReSs182 = "\u001b[38;5;182m"
ReSs183 = "\u001b[38;5;183m"
ReSs184 = "\u001b[38;5;184m"
ReSs185 = "\u001b[38;5;185m"
ReSs186 = "\u001b[38;5;186m"
ReSs187 = "\u001b[38;5;187m"
ReSs188 = "\u001b[38;5;188m"
ReSs189 = "\u001b[38;5;189m"
ReSs190 = "\u001b[38;5;190m"
ReSs191 = "\u001b[38;5;191m"
ReSs192 = "\u001b[38;5;192m"
ReSs193 = "\u001b[38;5;193m"
ReSs194 = "\u001b[38;5;194m"
ReSs195 = "\u001b[38;5;195m"
ReSs196 = "\u001b[38;5;196m"
ReSs197 = "\u001b[38;5;197m"
ReSs198 = "\u001b[38;5;198m"
ReSs199 = "\u001b[38;5;199m"
ReSs200 = "\u001b[38;5;200m"
ReSs201 = "\u001b[38;5;201m"
ReSs202 = "\u001b[38;5;202m"
ReSs203 = "\u001b[38;5;203m"
ReSs204 = "\u001b[38;5;204m"
ReSs205 = "\u001b[38;5;205m"
ReSs206 = "\u001b[38;5;206m"
ReSs207 = "\u001b[38;5;207m"
ReSs208 = "\u001b[38;5;208m"
ReSs209 = "\u001b[38;5;209m"
ReSs210 = "\u001b[38;5;210m"
ReSs211 = "\u001b[38;5;211m"
ReSs212 = "\u001b[38;5;212m"
ReSs213 = "\u001b[38;5;213m"
ReSs214 = "\u001b[38;5;214m"
ReSs215 = "\u001b[38;5;215m"
ReSs216 = "\u001b[38;5;216m"
ReSs217 = "\u001b[38;5;217m"
ReSs218 = "\u001b[38;5;218m"
ReSs219 = "\u001b[38;5;219m"
ReSs220 = "\u001b[38;5;220m"
ReSs221 = "\u001b[38;5;221m"
ReSs222 = "\u001b[38;5;222m"
ReSs223 = "\u001b[38;5;223m"
ReSs224 = "\u001b[38;5;224m"
ReSs225 = "\u001b[38;5;225m"
ReSs226 = "\u001b[38;5;226m"
ReSs227 = "\u001b[38;5;227m"
ReSs228 = "\u001b[38;5;228m"
ReSs229 = "\u001b[38;5;229m"
ReSs230 = "\u001b[38;5;230m"
ReSs231 = "\u001b[38;5;231m"
ReSs232 = "\u001b[38;5;232m"
ReSs233 = "\u001b[38;5;233m"
ReSs234 = "\u001b[38;5;234m"
ReSs235 = "\u001b[38;5;235m"
ReSs236 = "\u001b[38;5;236m"
ReSs237 = "\u001b[38;5;237m"
ReSs238 = "\u001b[38;5;238m"
ReSs239 = "\u001b[38;5;239m"
ReSs240 = "\u001b[38;5;240m"
ReSs241 = "\u001b[38;5;241m"
ReSs242 = "\u001b[38;5;242m"
ReSs243 = "\u001b[38;5;243m"
ReSs244 = "\u001b[38;5;244m"
ReSs245 = "\u001b[38;5;245m"
ReSs246 = "\u001b[38;5;246m"
ReSs247 = "\u001b[38;5;247m"
ReSs248 = "\u001b[38;5;248m"
ReSs249 = "\u001b[38;5;249m"
ReSs250 = "\u001b[38;5;250m"
ReSs251 = "\u001b[38;5;251m"
ReSs252 = "\u001b[38;5;252m"
ReSs253 = "\u001b[38;5;253m"
ReSs254 = "\u001b[38;5;254m"
###
A = "\x1b[0;90m"     # Hitam
B = "\x1b[38;5;196m" # Merah
C = "\x1b[38;5;46m"  # Hijau
D = "\x1b[38;5;226m" # Kuning
E = "\x1b[38;5;44m"  # Biru
F = "\x1b[38;5;231m" # Putih
G = "\x1b[38;5;248m" 
H = '\x1b[38;5;208m'
I ='\033[1;37m'
O = '\033[31;1m'
P = '\033[32;1m'
V = '\033[33;1m'
U = '\033[34;1m'
N = '\033[35;1m'
K = '\033[36;1m'
LR = '\033[91;1m'
LG = '\033[92;1m'
LY = '\033[93;1m'
LB = '\033[94;1m'
LM = '\033[95;1m'
LC = '\033[96;1m'
xxh = '\x1b[38;5;208m'#برتقالي
r1='\x1b[38;5;8m'#رمادي
m1='\x1b[38;5;196m'#احمر
a1 = '\x1b[1;31m'  # أحمر
a2 = '\x1b[1;34m'  # أزرق
a3 = '\x1b[1;32m'  # أخضر
a4 = '\x1b[1;33m'  # أصفر
a5 = '\x1b[38;5;208m'  # برتقالي
a6 = '\x1b[38;5;5m'  # أرجواني
a7 = '\x1b[38;5;13m'  # وردي
a8 = '\x1b[1;30m'  # أسود
a9 = '\x1b[1;37m'  # أبيض
a10 = '\x1b[38;5;52m'  # بني
a11 = '\x1b[38;5;8m'  # رمادي
a12 = '\x1b[38;5;220m'  # ذهبي
a13 = '\x1b[38;5;7m'  # فضي
a14 = '\x1b[38;5;153m'  # أزرق فاتح
a15 = '\x1b[38;5;18m'  # أزرق داكن
a16 = '\x1b[38;5;48m'  # أخضر فاتح
a17 = '\x1b[38;5;22m'  # أخضر داكن
a18 = '\x1b[38;5;196m'  # أحمر فاتح
a19 = '\x1b[38;5;88m'  # أحمر داكن
a20 = '\x1b[38;5;226m'  # أصفر فاتح
a21 = '\x1b[38;5;136m'  # أصفر داكن
a22 = '\x1b[38;5;216m'  # برتقالي فاتح
a23 = '\x1b[38;5;166m'  # برتقالي داكن
a25 = '\x1b[38;5;91m'  # أرجواني داكن
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي
####
E = '\033[1;31m'
G = '\033[1;35m'
Z = '\033[1;31m'  # احمر
X = '\033[1;33m'  # اصفر
Z1 = '\033[2;31m'  # احمر ثاني
F = '\033[2;32m'  # اخضر
A = '\033[2;34m'  # ازرق
C = '\033[2;35m'  # وردي
B = '\x1b[38;5;208m'  # برتقالي
Y = '\033[1;34m'  # ازرق فاتح
M = '\x1b[1;37m'  # ابیض
S = '\033[1;33m'
U = '\x1b[1;37m'  # ابیض
BRed = '\x1b[1;31m'
BGreen = '\x1b[1;32m'
BYellow = '\x1b[1;33m'
R = '\x1b[1;34m'
BPurple = '\x1b[1;35m'
BCyan = '\x1b[1;36m'
BWhite = '\x1b[1;37m'
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = "\033[1;30m"
sir = '\033[41m\x1b[1;97m'
x = '\33[m' # DEFAULT
m = '\x1b[1;91m' #RED +
k = '\033[93m' # KUNING +
h = '\x1b[1;92m' # HIJAU +
hh = '\033[32m' # HIJAU -
u = '\033[95m' # UNGU
kk = '\033[33m' # KUNING -
b = '\33[1;96m' # BIRU -
p = '\x1b[0;34m' # BIRU +
#asu = random.choice([m,k,h,u,b])
AB_A='\x1b[1;97m' # ابيض خط عربض
RS='\x1b[30m' #رصاصي
AH_F='\x1b[31m'   #احمر فاتح
AKH_F='\x1b[32m' #اخضر فاتح
AS_T='\x1b[33m'#اصفر طوخ
SM='\x1b[34m'  #سمائي
BN='\x1b[35m'#بنفسجي
AZ_T='\x1b[36m'  #ازرك طوخ
AB_KH='\x1b[37m' #ابيض خط خفيف
AH_T='\x1b[91m'  #احمر طوخ
AKH_T='\x1b[92m'#اخضر طوخ
AS_F='\x1b[93m'    #اصفر فاتح
WR='\x1b[95m'      #وردي
p='\x1b[38;5;208m' #برتقالي
AH2='\x1b[38;5;204m'
AS2='\x1b[38;5;220m'
MJ='\x1b[38;5;193m'
MJ2='\x1b[38;5;216m'
MJ3='\x1b[38;5;190m'
O='\x1b[0;96m'     # Biru Muda
P='\x1b[38;5;231m' # Putih
J='\x1b[38;5;208m' # Jingga
MJ4='\x1b[38;5;106m'
Z = '\033[1;31m' #احمر
R = '\033[1;31m' #احمر
X = '\033[1;33m' #اصفر
F = '\033[2;32m' #اخضر
C = "\033[1;97m" #ابيض
B = '\033[2;36m'#سمائي
Y = '\033[1;34m' #ازرق فاتح.
E = '\033[1;31m'
B = '\033[2;36m'
G = '\033[1;32m'
S = '\033[1;33m'
color0 = "\u001b[38;5;0m"
color1 = "\u001b[38;5;1m"
color2 = "\u001b[38;5;2m"
color3 = "\u001b[38;5;3m"
color4 = "\u001b[38;5;4m"
color5 = "\u001b[38;5;5m"
color6 = "\u001b[38;5;6m"
color7 = "\u001b[38;5;7m"
color8 = "\u001b[38;5;8m"
color9 = "\u001b[38;5;9m"
color10 = "\u001b[38;5;10m"
color11 = "\u001b[38;5;11m"
color12 = "\u001b[38;5;12m"
color13 = "\u001b[38;5;13m"
color14 = "\u001b[38;5;14m"
color15 = "\u001b[38;5;15m"
color16 = "\u001b[38;5;16m"
color17 = "\u001b[38;5;17m"
color18 = "\u001b[38;5;18m"
color19 = "\u001b[38;5;19m"
color20 = "\u001b[38;5;20m"
color21 = "\u001b[38;5;21m"
color22 = "\u001b[38;5;22m"
color23 = "\u001b[38;5;23m"
color24 = "\u001b[38;5;24m"
color25 = "\u001b[38;5;25m"
color26 = "\u001b[38;5;26m"
color27 = "\u001b[38;5;27m"
color28 = "\u001b[38;5;28m"
color29 = "\u001b[38;5;29m"
color30 = "\u001b[38;5;30m"
color31 = "\u001b[38;5;31m"
color32 = "\u001b[38;5;32m"
color33 = "\u001b[38;5;33m"
color34 = "\u001b[38;5;34m"
color35 = "\u001b[38;5;35m"
color36 = "\u001b[38;5;36m"
color37 = "\u001b[38;5;37m"
color38 = "\u001b[38;5;38m"
color39 = "\u001b[38;5;39m"
color40 = "\u001b[38;5;40m"
color41 = "\u001b[38;5;41m"
color42 = "\u001b[38;5;42m"
color43 = "\u001b[38;5;43m"
color44 = "\u001b[38;5;44m"
color45 = "\u001b[38;5;45m"
color46 = "\u001b[38;5;46m"
color47 = "\u001b[38;5;47m"
color48 = "\u001b[38;5;48m"
color49 = "\u001b[38;5;49m"
color50 = "\u001b[38;5;50m"
color51 = "\u001b[38;5;51m"
color52 = "\u001b[38;5;52m"
color53 = "\u001b[38;5;53m"
color54 = "\u001b[38;5;54m"
color55 = "\u001b[38;5;55m"
color56 = "\u001b[38;5;56m"
color57 = "\u001b[38;5;57m"
color58 = "\u001b[38;5;58m"
color59 = "\u001b[38;5;59m"
color60 = "\u001b[38;5;60m"
color61 = "\u001b[38;5;61m"
color62 = "\u001b[38;5;62m"
color63 = "\u001b[38;5;63m"
color64 = "\u001b[38;5;64m"
color65 = "\u001b[38;5;65m"
color66 = "\u001b[38;5;66m"
color67 = "\u001b[38;5;67m"
color68 = "\u001b[38;5;68m"
color69 = "\u001b[38;5;69m"
color70 = "\u001b[38;5;70m"
color71 = "\u001b[38;5;71m"
color72 = "\u001b[38;5;72m"
color73 = "\u001b[38;5;73m"
color74 = "\u001b[38;5;74m"
color75 = "\u001b[38;5;75m"
color76 = "\u001b[38;5;76m"
color77 = "\u001b[38;5;77m"
color78 = "\u001b[38;5;78m"
color79 = "\u001b[38;5;79m"
color80 = "\u001b[38;5;80m"
color81 = "\u001b[38;5;81m"
color82 = "\u001b[38;5;82m"
color83 = "\u001b[38;5;83m"
color84 = "\u001b[38;5;84m"
color85 = "\u001b[38;5;85m"
color86 = "\u001b[38;5;86m"
color87 = "\u001b[38;5;87m"
color88 = "\u001b[38;5;88m"
color89 = "\u001b[38;5;89m"
color90 = "\u001b[38;5;90m"
color91 = "\u001b[38;5;91m"
color92 = "\u001b[38;5;92m"
color93 = "\u001b[38;5;93m"
color94 = "\u001b[38;5;94m"
color95 = "\u001b[38;5;95m"
color96 = "\u001b[38;5;96m"
color97 = "\u001b[38;5;97m"
color98 = "\u001b[38;5;98m"
color99 = "\u001b[38;5;99m"
color100 = "\u001b[38;5;100m"
color101 = "\u001b[38;5;101m"
color102 = "\u001b[38;5;102m"
color103 = "\u001b[38;5;103m"
color104 = "\u001b[38;5;104m"
color105 = "\u001b[38;5;105m"
color106 = "\u001b[38;5;106m"
color107 = "\u001b[38;5;107m"
color108 = "\u001b[38;5;108m"
color109 = "\u001b[38;5;109m"
color110 = "\u001b[38;5;110m"
color111 = "\u001b[38;5;111m"
color112 = "\u001b[38;5;112m"
color113 = "\u001b[38;5;113m"
color114 = "\u001b[38;5;114m"
color115 = "\u001b[38;5;115m"
color116 = "\u001b[38;5;116m"
color117 = "\u001b[38;5;117m"
color118 = "\u001b[38;5;118m"
color119 = "\u001b[38;5;119m"
color120 = "\u001b[38;5;120m"
color121 = "\u001b[38;5;121m"
color122 = "\u001b[38;5;122m"
color123 = "\u001b[38;5;123m"
color124 = "\u001b[38;5;124m"
color125 = "\u001b[38;5;125m"
color126 = "\u001b[38;5;126m"
color127 = "\u001b[38;5;127m"
color128 = "\u001b[38;5;128m"
color129 = "\u001b[38;5;129m"
color130 = "\u001b[38;5;130m"
color131 = "\u001b[38;5;131m"
color132 = "\u001b[38;5;132m"
color133 = "\u001b[38;5;133m"
color134 = "\u001b[38;5;134m"
color135 = "\u001b[38;5;135m"
color136 = "\u001b[38;5;136m"
color137 = "\u001b[38;5;137m"
color138 = "\u001b[38;5;138m"
color139 = "\u001b[38;5;139m"
color140 = "\u001b[38;5;140m"
color141 = "\u001b[38;5;141m"
color142 = "\u001b[38;5;142m"
color143 = "\u001b[38;5;143m"
color144 = "\u001b[38;5;144m"
color145 = "\u001b[38;5;145m"
color146 = "\u001b[38;5;146m"
color147 = "\u001b[38;5;147m"
color148 = "\u001b[38;5;148m"
color149 = "\u001b[38;5;149m"
color150 = "\u001b[38;5;150m"
color151 = "\u001b[38;5;151m"
color152 = "\u001b[38;5;152m"
color153 = "\u001b[38;5;153m"
color154 = "\u001b[38;5;154m"
color155 = "\u001b[38;5;155m"
color156 = "\u001b[38;5;156m"
color157 = "\u001b[38;5;157m"
color158 = "\u001b[38;5;158m"
color159 = "\u001b[38;5;159m"
color160 = "\u001b[38;5;160m"
color161 = "\u001b[38;5;161m"
color162 = "\u001b[38;5;162m"
color163 = "\u001b[38;5;163m"
color164 = "\u001b[38;5;164m"
color165 = "\u001b[38;5;165m"
color166 = "\u001b[38;5;166m"
color167 = "\u001b[38;5;167m"
color168 = "\u001b[38;5;168m"
color169 = "\u001b[38;5;169m"
color170 = "\u001b[38;5;170m"
color171 = "\u001b[38;5;171m"
color172 = "\u001b[38;5;172m"
color173 = "\u001b[38;5;173m"
color174 = "\u001b[38;5;174m"
color175 = "\u001b[38;5;175m"
color176 = "\u001b[38;5;176m"
color177 = "\u001b[38;5;177m"
color178 = "\u001b[38;5;178m"
color179 = "\u001b[38;5;179m"
color180 = "\u001b[38;5;180m"
color181 = "\u001b[38;5;181m"
color182 = "\u001b[38;5;182m"
color183 = "\u001b[38;5;183m"
color184 = "\u001b[38;5;184m"
color185 = "\u001b[38;5;185m"
color186 = "\u001b[38;5;186m"
color187 = "\u001b[38;5;187m"
color188 = "\u001b[38;5;188m"
color189 = "\u001b[38;5;189m"
color190 = "\u001b[38;5;190m"
color191 = "\u001b[38;5;191m"
color192 = "\u001b[38;5;192m"
color193 = "\u001b[38;5;193m"
color194 = "\u001b[38;5;194m"
color195 = "\u001b[38;5;195m"
color196 = "\u001b[38;5;196m"
color197 = "\u001b[38;5;197m"
color198 = "\u001b[38;5;198m"
color199 = "\u001b[38;5;199m"
color200 = "\u001b[38;5;200m"
color201 = "\u001b[38;5;201m"
color202 = "\u001b[38;5;202m"
color203 = "\u001b[38;5;203m"
color204 = "\u001b[38;5;204m"
color205 = "\u001b[38;5;205m"
color206 = "\u001b[38;5;206m"
color207 = "\u001b[38;5;207m"
color208 = "\u001b[38;5;208m"
color209 = "\u001b[38;5;209m"
color210 = "\u001b[38;5;210m"
color211 = "\u001b[38;5;211m"
color212 = "\u001b[38;5;212m"
color213 = "\u001b[38;5;213m"
color214 = "\u001b[38;5;214m"
color215 = "\u001b[38;5;215m"
color216 = "\u001b[38;5;216m"
color217 = "\u001b[38;5;217m"
color218 = "\u001b[38;5;218m"
color219 = "\u001b[38;5;219m"
color220 = "\u001b[38;5;220m"
color221 = "\u001b[38;5;221m"
color222 = "\u001b[38;5;222m"
color223 = "\u001b[38;5;223m"
color224 = "\u001b[38;5;224m"
color225 = "\u001b[38;5;225m"
color226 = "\u001b[38;5;226m"
color227 = "\u001b[38;5;227m"
color228 = "\u001b[38;5;228m"
color229 = "\u001b[38;5;229m"
color230 = "\u001b[38;5;230m"
color231 = "\u001b[38;5;231m"
color232 = "\u001b[38;5;232m"
color233 = "\u001b[38;5;233m"
color234 = "\u001b[38;5;234m"
color235 = "\u001b[38;5;235m"
color236 = "\u001b[38;5;236m"
color237 = "\u001b[38;5;237m"
color238 = "\u001b[38;5;238m"
color239 = "\u001b[38;5;239m"
color240 = "\u001b[38;5;240m"
color241 = "\u001b[38;5;241m"
color242 = "\u001b[38;5;242m"
color243 = "\u001b[38;5;243m"
color244 = "\u001b[38;5;244m"
color245 = "\u001b[38;5;245m"
color246 = "\u001b[38;5;246m"
color247 = "\u001b[38;5;247m"
color248 = "\u001b[38;5;248m"
color249 = "\u001b[38;5;249m"
color250 = "\u001b[38;5;250m"
color251 = "\u001b[38;5;251m"
color252 = "\u001b[38;5;252m"
color253 = "\u001b[38;5;253m"
color254 = "\u001b[38;5;254m"
color255 = "\u001b[38;5;255m"
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m'
O = '\x1b[1;96m'
N = '\x1b[0m'
Z = "\033[1;30m"
x = '\33[m' # DEFAULT
m = '\x1b[1;91m' #RED +
k = '\x1b[38;5;208m' # KUNING +
h = '\x1b[38;5;204m' # HIJAU +
hh = '\x1b[38;5;220m' # HIJAU -
u = '\x1b[38;5;193m' # UNGU
kk = '\x1b[38;5;216m' # KUNING -
b = '\x1b[38;5;190m' # BIRU -
p = '\x1b[38;5;106m' # BIRU +
a10 = '\x1b[38;5;52m'  # بني
a11 = '\x1b[38;5;8m'  # رمادي
a12 = '\x1b[38;5;220m'  # ذهبي
a13 = '\x1b[38;5;7m'  # فضي
a14 = '\x1b[38;5;153m'  # أزرق فاتح
a15 = '\x1b[38;5;18m'  # أزرق داكن
a16 = '\x1b[38;5;48m'  # أخضر فاتح
a17 = '\x1b[38;5;22m'  # أخضر داكن
a18 = '\x1b[38;5;196m'  # أحمر فاتح
a19 = '\x1b[38;5;88m'  # أحمر داكن
a20 = '\x1b[38;5;226m'  # أصفر فاتح
a21 = '\x1b[38;5;136m'  # أصفر داكن
a22 = '\x1b[38;5;216m'  # برتقالي فات
a23 = '\x1b[38;5;166m'  # برتقالي داكن
a24 = '\x1b[38;5;234m'  # أرجواني فاتح
a25 = '\x1b[38;5;91m'  # أرجواني داكن
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي
###
G2 = ('\x1b[1;32m') # اخضر
G1 = '\x1b[1;97m' # ابيض
G2 = '\x1b[38;5;196m' # برتقالي
G3 = '\x1b[1;33m' # اصفر
G4 = '\x1b[1;96m'# سمائي
G5 = '\x1b[38;5;8m'#رصاصي
G6 = '\x1b[38;5;48m' # اخضر مميز 45%
G7 = '\x1b[38;5;47m' # اخضر HD
G8 = '\x1b[38;5;49m' # سمائي + اخضر
G9 = '\x1b[38;5;50m' # سمائي + اخضر HD
G10 = '\x1b[1;34m' # ازرق
G11 = '\x1b[38;5;14m' # سمائي خفيف
G12 = '\x1b[38;5;123m' # سمائي فقط 
G13 = '\x1b[38;5;122m'# سمائي بجودة عالية
G14 = '\x1b[38;5;86m'# سمائي مميز
G14 = '\x1b[38;5;121m' # وردي
G15 = '\x1b[38;5;205m' # برتقالي غامق
G16 = '\x1b[1;92m\x1b[38;5;208m'# برتقالي فاتح
G17 = '\x1b[1;92m\x1b[38;5;209m'# برتقالي + وردي 35%
G18 = '\x1b[1;92m\x1b[38;5;210m'# برتقالي + وردي 66%
G19 = '\x1b[1;92m\x1b[38;5;211m'# وردي فاتح
G20 = '\x1b[1;92m\x1b[38;5;212m'# اخضر غامق
G21 = '\x1b[1;92m\x1b[38;5;46m' # اخضر  غامق 50%
G23 = '\x1b[1;92m\x1b[38;5;47m' # اخضر خفيف
G24 = '\x1b[1;92m\x1b[38;5;48m'# اخضر فاتح 50%
G25 = '\x1b[1;92m\x1b[38;5;49m' # سمائي 
G26 = '\x1b[1;92m\x1b[38;5;50m'# سمائي مميز 2
###
###
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي
###
ReSs0 = "\u001b[38;5;0m"
ReSs1 = "\u001b[38;5;1m"
ReSs2 = "\u001b[38;5;2m"
ReSs3 = "\u001b[38;5;3m"
ReSs4 = "\u001b[38;5;4m"
ReSs5 = "\u001b[38;5;5m"
ReSs6 = "\u001b[38;5;6m"
ReSs7 = "\u001b[38;5;7m"
ReSs8 = "\u001b[38;5;8m"
ReSs9 = "\u001b[38;5;9m"
ReSs10 = "\u001b[38;5;10m"
ReSs11 = "\u001b[38;5;11m"
ReSs12 = "\u001b[38;5;12m"
ReSs13 = "\u001b[38;5;13m"
ReSs14 = "\u001b[38;5;14m"
ReSs15 = "\u001b[38;5;15m"
ReSs16 = "\u001b[38;5;16m"
ReSs17 = "\u001b[38;5;17m"
ReSs18 = "\u001b[38;5;18m"
ReSs19 = "\u001b[38;5;19m"
ReSs20 = "\u001b[38;5;20m"
ReSs21 = "\u001b[38;5;21m"
ReSs22 = "\u001b[38;5;22m"
ReSs23 = "\u001b[38;5;23m"
ReSs24 = "\u001b[38;5;24m"
ReSs25 = "\u001b[38;5;25m"
ReSs26 = "\u001b[38;5;26m"
ReSs27 = "\u001b[38;5;27m"
ReSs28 = "\u001b[38;5;28m"
ReSs29 = "\u001b[38;5;29m"
ReSs30 = "\u001b[38;5;30m"
ReSs31 = "\u001b[38;5;31m"
ReSs32 = "\u001b[38;5;32m"
ReSs33 = "\u001b[38;5;33m"
ReSs34 = "\u001b[38;5;34m"
ReSs35 = "\u001b[38;5;35m"
ReSs36 = "\u001b[38;5;36m"
ReSs37 = "\u001b[38;5;37m"
ReSs38 = "\u001b[38;5;38m"
ReSs39 = "\u001b[38;5;39m"
ReSs40 = "\u001b[38;5;40m"
ReSs41 = "\u001b[38;5;41m"
ReSs42 = "\u001b[38;5;42m"
ReSs43 = "\u001b[38;5;43m"
ReSs44 = "\u001b[38;5;44m"
ReSs45 = "\u001b[38;5;45m"
ReSs46 = "\u001b[38;5;46m"
ReSs47 = "\u001b[38;5;47m"
ReSs48 = "\u001b[38;5;48m"
ReSs49 = "\u001b[38;5;49m"
ReSs50 = "\u001b[38;5;50m"
ReSs51 = "\u001b[38;5;51m"
ReSs52 = "\u001b[38;5;52m"
ReSs53 = "\u001b[38;5;53m"
ReSs54 = "\u001b[38;5;54m"
ReSs55 = "\u001b[38;5;55m"
ReSs56 = "\u001b[38;5;56m"
ReSs57 = "\u001b[38;5;57m"
ReSs58 = "\u001b[38;5;58m"
ReSs59 = "\u001b[38;5;59m"
ReSs60 = "\u001b[38;5;60m"
ReSs61 = "\u001b[38;5;61m"
ReSs62 = "\u001b[38;5;62m"
ReSs63 = "\u001b[38;5;63m"
ReSs64 = "\u001b[38;5;64m"
ReSs65 = "\u001b[38;5;65m"
ReSs66 = "\u001b[38;5;66m"
ReSs67 = "\u001b[38;5;67m"
ReSs68 = "\u001b[38;5;68m"
ReSs69 = "\u001b[38;5;69m"
ReSs70 = "\u001b[38;5;70m"
ReSs71 = "\u001b[38;5;71m"
ReSs72 = "\u001b[38;5;72m"
ReSs73 = "\u001b[38;5;73m"
ReSs74 = "\u001b[38;5;74m"
ReSs75 = "\u001b[38;5;75m"
ReSs76 = "\u001b[38;5;76m"
ReSs77 = "\u001b[38;5;77m"
ReSs78 = "\u001b[38;5;78m"
ReSs79 = "\u001b[38;5;79m"
ReSs80 = "\u001b[38;5;80m"
ReSs81 = "\u001b[38;5;81m"
ReSs82 = "\u001b[38;5;82m"
ReSs83 = "\u001b[38;5;83m"
ReSs84 = "\u001b[38;5;84m"
ReSs85 = "\u001b[38;5;85m"
ReSs86 = "\u001b[38;5;86m"
ReSs87 = "\u001b[38;5;87m"
ReSs88 = "\u001b[38;5;88m"
ReSs89 = "\u001b[38;5;89m"
ReSs90 = "\u001b[38;5;90m"
ReSs91 = "\u001b[38;5;91m"
ReSs92 = "\u001b[38;5;92m"
ReSs93 = "\u001b[38;5;93m"
ReSs94 = "\u001b[38;5;94m"
ReSs95 = "\u001b[38;5;95m"
ReSs96 = "\u001b[38;5;96m"
ReSs97 = "\u001b[38;5;97m"
ReSs98 = "\u001b[38;5;98m"
ReSs99 = "\u001b[38;5;99m"
ReSs100 = "\u001b[38;5;100m"
ReSs101 = "\u001b[38;5;101m"
ReSs102 = "\u001b[38;5;102m"
ReSs103 = "\u001b[38;5;103m"
ReSs104 = "\u001b[38;5;104m"
ReSs105 = "\u001b[38;5;105m"
ReSs106 = "\u001b[38;5;106m"
ReSs107 = "\u001b[38;5;107m"
ReSs108 = "\u001b[38;5;108m"
ReSs109 = "\u001b[38;5;109m"
ReSs110 = "\u001b[38;5;110m"
ReSs111 = "\u001b[38;5;111m"
ReSs112 = "\u001b[38;5;112m"
ReSs113 = "\u001b[38;5;113m"
ReSs114 = "\u001b[38;5;114m"
ReSs115 = "\u001b[38;5;115m"
ReSs116 = "\u001b[38;5;116m"
ReSs117 = "\u001b[38;5;117m"
ReSs118 = "\u001b[38;5;118m"
ReSs119 = "\u001b[38;5;119m"
ReSs120 = "\u001b[38;5;120m"
ReSs121 = "\u001b[38;5;121m"
ReSs122 = "\u001b[38;5;122m"
ReSs123 = "\u001b[38;5;123m"
ReSs124 = "\u001b[38;5;124m"
ReSs125 = "\u001b[38;5;125m"
ReSs126 = "\u001b[38;5;126m"
ReSs127 = "\u001b[38;5;127m"
ReSs128 = "\u001b[38;5;128m"
ReSs129 = "\u001b[38;5;129m"
ReSs130 = "\u001b[38;5;130m"
ReSs131 = "\u001b[38;5;131m"
ReSs132 = "\u001b[38;5;132m"
ReSs133 = "\u001b[38;5;133m"
ReSs134 = "\u001b[38;5;134m"
ReSs135 = "\u001b[38;5;135m"
ReSs136 = "\u001b[38;5;136m"
ReSs137 = "\u001b[38;5;137m"
ReSs138 = "\u001b[38;5;138m"
ReSs139 = "\u001b[38;5;139m"
ReSs140 = "\u001b[38;5;140m"
ReSs141 = "\u001b[38;5;141m"
ReSs142 = "\u001b[38;5;142m"
ReSs143 = "\u001b[38;5;143m"
ReSs144 = "\u001b[38;5;144m"
ReSs145 = "\u001b[38;5;145m"
ReSs146 = "\u001b[38;5;146m"
ReSs147 = "\u001b[38;5;147m"
ReSs148 = "\u001b[38;5;148m"
ReSs149 = "\u001b[38;5;149m"
ReSs150 = "\u001b[38;5;150m"
ReSs151 = "\u001b[38;5;151m"
ReSs152 = "\u001b[38;5;152m"
ReSs153 = "\u001b[38;5;153m"
ReSs154 = "\u001b[38;5;154m"
ReSs155 = "\u001b[38;5;155m"
ReSs156 = "\u001b[38;5;156m"
ReSs157 = "\u001b[38;5;157m"
ReSs158 = "\u001b[38;5;158m"
ReSs159 = "\u001b[38;5;159m"
ReSs160 = "\u001b[38;5;160m"
ReSs161 = "\u001b[38;5;161m"
ReSs162 = "\u001b[38;5;162m"
ReSs163 = "\u001b[38;5;163m"
ReSs164 = "\u001b[38;5;164m"
ReSs165 = "\u001b[38;5;165m"
ReSs166 = "\u001b[38;5;166m"
ReSs167 = "\u001b[38;5;167m"
ReSs168 = "\u001b[38;5;168m"
ReSs169 = "\u001b[38;5;169m"
ReSs170 = "\u001b[38;5;170m"
ReSs171 = "\u001b[38;5;171m"
ReSs172 = "\u001b[38;5;172m"
ReSs173 = "\u001b[38;5;173m"
ReSs174 = "\u001b[38;5;174m"
ReSs175 = "\u001b[38;5;175m"
ReSs176 = "\u001b[38;5;176m"
ReSs177 = "\u001b[38;5;177m"
ReSs178 = "\u001b[38;5;178m"
ReSs179 = "\u001b[38;5;179m"
ReSs180 = "\u001b[38;5;180m"
ReSs181 = "\u001b[38;5;181m"
ReSs182 = "\u001b[38;5;182m"
ReSs183 = "\u001b[38;5;183m"
ReSs184 = "\u001b[38;5;184m"
ReSs185 = "\u001b[38;5;185m"
ReSs186 = "\u001b[38;5;186m"
ReSs187 = "\u001b[38;5;187m"
ReSs188 = "\u001b[38;5;188m"
ReSs189 = "\u001b[38;5;189m"
ReSs190 = "\u001b[38;5;190m"
ReSs191 = "\u001b[38;5;191m"
ReSs192 = "\u001b[38;5;192m"
ReSs193 = "\u001b[38;5;193m"
ReSs194 = "\u001b[38;5;194m"
ReSs195 = "\u001b[38;5;195m"
ReSs196 = "\u001b[38;5;196m"
ReSs197 = "\u001b[38;5;197m"
ReSs198 = "\u001b[38;5;198m"
ReSs199 = "\u001b[38;5;199m"
ReSs200 = "\u001b[38;5;200m"
ReSs201 = "\u001b[38;5;201m"
ReSs202 = "\u001b[38;5;202m"
ReSs203 = "\u001b[38;5;203m"
ReSs204 = "\u001b[38;5;204m"
ReSs205 = "\u001b[38;5;205m"
ReSs206 = "\u001b[38;5;206m"
ReSs207 = "\u001b[38;5;207m"
ReSs208 = "\u001b[38;5;208m"
ReSs209 = "\u001b[38;5;209m"
ReSs210 = "\u001b[38;5;210m"
ReSs211 = "\u001b[38;5;211m"
ReSs212 = "\u001b[38;5;212m"
ReSs213 = "\u001b[38;5;213m"
ReSs214 = "\u001b[38;5;214m"
ReSs215 = "\u001b[38;5;215m"
ReSs216 = "\u001b[38;5;216m"
ReSs217 = "\u001b[38;5;217m"
ReSs218 = "\u001b[38;5;218m"
ReSs219 = "\u001b[38;5;219m"
ReSs220 = "\u001b[38;5;220m"
ReSs221 = "\u001b[38;5;221m"
ReSs222 = "\u001b[38;5;222m"
ReSs223 = "\u001b[38;5;223m"
ReSs224 = "\u001b[38;5;224m"
ReSs225 = "\u001b[38;5;225m"
ReSs226 = "\u001b[38;5;226m"
ReSs227 = "\u001b[38;5;227m"
ReSs228 = "\u001b[38;5;228m"
ReSs229 = "\u001b[38;5;229m"
ReSs230 = "\u001b[38;5;230m"
ReSs231 = "\u001b[38;5;231m"
ReSs232 = "\u001b[38;5;232m"
ReSs233 = "\u001b[38;5;233m"
ReSs234 = "\u001b[38;5;234m"
ReSs235 = "\u001b[38;5;235m"
ReSs236 = "\u001b[38;5;236m"
ReSs237 = "\u001b[38;5;237m"
ReSs238 = "\u001b[38;5;238m"
ReSs239 = "\u001b[38;5;239m"
ReSs240 = "\u001b[38;5;240m"
ReSs241 = "\u001b[38;5;241m"
ReSs242 = "\u001b[38;5;242m"
ReSs243 = "\u001b[38;5;243m"
ReSs244 = "\u001b[38;5;244m"
ReSs245 = "\u001b[38;5;245m"
ReSs246 = "\u001b[38;5;246m"
ReSs247 = "\u001b[38;5;247m"
ReSs248 = "\u001b[38;5;248m"
ReSs249 = "\u001b[38;5;249m"
ReSs250 = "\u001b[38;5;250m"
ReSs251 = "\u001b[38;5;251m"
ReSs252 = "\u001b[38;5;252m"
ReSs253 = "\u001b[38;5;253m"
ReSs254 = "\u001b[38;5;254m"
###
A = "\x1b[0;90m"     # Hitam
B = "\x1b[38;5;196m" # Merah
C = "\x1b[38;5;46m"  # Hijau
D = "\x1b[38;5;226m" # Kuning
E = "\x1b[38;5;44m"  # Biru
F = "\x1b[38;5;231m" # Putih
G = "\x1b[38;5;248m" 
H = '\x1b[38;5;208m'
I ='\033[1;37m'
O = '\033[31;1m'
P = '\033[32;1m'
V = '\033[33;1m'
U = '\033[34;1m'
N = '\033[35;1m'
K = '\033[36;1m'
LR = '\033[91;1m'
LG = '\033[92;1m'
LY = '\033[93;1m'
LB = '\033[94;1m'
LM = '\033[95;1m'
LC = '\033[96;1m'
xxh = '\x1b[38;5;208m'#برتقالي
r1='\x1b[38;5;8m'#رمادي
m1='\x1b[38;5;196m'#احمر
a1 = '\x1b[1;31m'  # أحمر
a2 = '\x1b[1;34m'  # أزرق
a3 = '\x1b[1;32m'  # أخضر
a4 = '\x1b[1;33m'  # أصفر
a5 = '\x1b[38;5;208m'  # برتقالي
a6 = '\x1b[38;5;5m'  # أرجواني
a7 = '\x1b[38;5;13m'  # وردي
a8 = '\x1b[1;30m'  # أسود
a9 = '\x1b[1;37m'  # أبيض
a10 = '\x1b[38;5;52m'  # بني
a11 = '\x1b[38;5;8m'  # رمادي
a12 = '\x1b[38;5;220m'  # ذهبي
a13 = '\x1b[38;5;7m'  # فضي
a14 = '\x1b[38;5;153m'  # أزرق فاتح
a15 = '\x1b[38;5;18m'  # أزرق داكن
a16 = '\x1b[38;5;48m'  # أخضر فاتح
a17 = '\x1b[38;5;22m'  # أخضر داكن
a18 = '\x1b[38;5;196m'  # أحمر فاتح
a19 = '\x1b[38;5;88m'  # أحمر داكن
a20 = '\x1b[38;5;226m'  # أصفر فاتح
a21 = '\x1b[38;5;136m'  # أصفر داكن
a22 = '\x1b[38;5;216m'  # برتقالي فاتح
a23 = '\x1b[38;5;166m'  # برتقالي داكن
a25 = '\x1b[38;5;91m'  # أرجواني داكن
a26 = '\x1b[38;5;205m'  # وردي فاتح
a27 = '\x1b[38;5;161m'  # وردي داكن
a28 = '\x1b[38;5;236m'  # أسود فاتح
a29 = '\x1b[38;5;233m'  # أسود داكن
a30 = '\x1b[38;5;255m'  # أبيض فاتح
a31 = '\x1b[38;5;231m'  # أبيض داكن
a32 = '\x1b[38;5;180m'  # بني فاتح
a33 = '\x1b[38;5;94m'  # بني داكن
a34 = '\x1b[38;5;252m'  # رمادي فاتح
a35 = '\x1b[38;5;246m'  # رمادي داكن
a36 = '\x1b[38;5;228m'  # ذهبي فاتح
a37 = '\x1b[38;5;172m'  # ذهبي داكن
a38 = '\x1b[38;5;188m'  # فضي فاتح
a39 = '\x1b[38;5;247m'  # فضي داكن
a40 = '\x1b[38;5;117m'  # أزرق سماوي
###
a40 = '\x1b[38;5;117m'  # أزرق سماوي
###
P = '\x1b[1;97m'
M = '\x1b[1;91m'
H = '\x1b[1;92m'
K = '\x1b[1;93m'
B = '\x1b[1;94m'
U = '\x1b[1;95m' 
O = '\x1b[1;96m'
N = '\x1b[0m'    
Z = "\033[1;30m"
sir = '\033[41m\x1b[1;97m'
x = '\33[m' # DEFAULT
m = '\x1b[1;91m' 
k = '\033[93m' 
h = '\x1b[1;92m' 
hh = '\033[32m' 
u = '\033[95m' 
kk = '\033[33m' 
b = '\33[1;96m'
p = '\x1b[0;34m'
Black = '\033[0;30m'        
Red = '\033[0;31m'       
Green = '\033[0;32m'       
Yellow = '\033[0;33m'     
Blue = '\033[0;34m'         
purple = '\033[0;35m'    
Cyan = '\033[0;36m'        
White = '\033[0;37m'      

	

def bytos(so):
	source=so
	
	do={}
	for i in source.split('bytes'):
		
		
		try:
			
			sb=str(i).split('(')[1]
			sb=sb.split(').dec')[0]
			enc='bytes('+sb+').decode()'
			ev=(sb.replace(' ',''))
			ls=[]
			for e in ev.split('\n'):
				e=e.replace(',','')
				e=e.replace(']','')
				e=e.replace('[','')
				try:
					en=(int(e))
					ls.append(en)
				
				
				except:
					1
		
		
			rel=(bytes(ls).decode())
			enc=enc
			do.update({enc:rel})
			ls.clear
		except IndexError:
			pass
		#print(rel)

	for en,de in do.items():
		#source=open(fi,'r').read()
		if en in source:
			source=source
			#print(de)
			source=source.replace(en,f"'''{de}'''")
		source=source
		#source=open(fi,'w').write(source)
		save(source,'w','ou')
		
def kill_none(source):
	cod=open(source,'r').read()
	non="""None(None((lambda .0 = None: for i in .0:
"""
	rng='))(range('
	qc='))))'
	cod=cod.replace(non,"str(''.join(")
	cod=cod.replace(rng,") for i in range(int(")
	open(source,'w').write(cod)
	#print(cod)
	
def kill_non(file):
	rso=file
	fin=open(file,'r')
	#fri=0
	if 'None(None((lambda' in fin.read():
		
		fri=0
		for jkk in open(file,'r').readlines():
			
			if 'None(None((lambda' in jkk:
				
				
				fri+=1
				
		for ils in range(fri):
				file =open(rso,'r').read()
				first=file.split('None(None((lambda')[1]
				fend=first.split(')))')[0]
				none=('None(None((lambda'+fend+'))))')
				print(none)
				
				
				cho=first.split('choice(')[1].split(')')[0]
				rang=first.split('range(')[1]
				if '(' in rang:
					rang=rang.split('int(')[1].split(')')[0]
				else:
					rsng=rang.split(')')[0]
				
				#print(range)
				rel="str(''.join(random.choice("+str(cho)+') for i in range(int('+str(rang)+'))'
				if none in file:
					#print(none)
					sourc=file.replace(none,rel)
					open(rso,'w').write(sourc)
		

Copyright=['@O_O_P_V','@O_O_P_V']
		
def clear_un(source):
	p="Thread(rann, **('target',)"
	if p in source:
		source=source.replace(p,'Thread(target=rann')			
	p='return None'
	if p in source:
		source=source.replace(p,'')		
	p='''finally:
                                continue'''
                                
	if p in source:
		source=source.replace(p,'except:')	
	p='''finally:
                        pass'''
	if p in source:
		source=source.replace(p,'except:')
	p='''finally:
                    pass'''
	if p in source:
		source=source.replace(p,'except:')
	p='''finally:
            pass'''
    
	if p in source:
		source=source.replace(p,'except:')
	p='finally:'
	if p in source:
		source=source.replace(p,'except:')
	p="  copyright = '@O_O_P_V'"
	if p in source:
		source=source.replace(p,'')
	p='continue'
	if p in source:
		source=source.replace(p,'')
	p='''foo = False
if foo:
    
    try:'''
    
	ex="""    except:
		1"""
	if p in source:
		source=source+ex
	#header
	h="(c, head1, data1, **('headers', 'data'))"
	if h in source:
		source=source.replace(h,"(url=c,headers=head1,data1)")
	h="(url, headers, **('headers',))"
	if h in source:
		source=source.replace(h,'(url=url,headers=headers')
	h="'cookie': cok }, **('cookies',)"
	if h in source:
		source=source.replace(h,"'cookie': cookies=cok")
	h="headers_, **('headers',)"
	if h in source:
		source=source.replace(h,'headera=headera_,')
	if "os.system('pip install" in source:
		source=source.replace("os.system('pip install","    os.system('pip install")
	h="\n')"
	if h in source:
		source =source.replace(h,"')")
	h="head1, **('headers',)"
	if h in source:
		source =source.replace(h,'headers=head1')
	h="headers, cookies, **('headers', 'cookies')"
	if h in source :
		source =source.replace(h,'headers=headers,cookies=cookies')
	h="head, **('headers',)"
	if h in source :
		source=source.replace(h,'headers=head')
	h="headers, data, **('headers', 'data')"
	if h in source :
		source =source.replace(h,'headers=headers,data=data')
	h="headers, **('headers',)"
	if h in source:
		source =source.replace(h,'headers=headers')
                                  
	h="        os.system('pip install"
	if h in source:
		source =source.replace(h,"    os.system('pip install")
	cobe="\n\n"
	source=cobe+source+'\n'+cobe
	#source=source.split('        ')
	#source=''.join(source)
	#source=autopep8.fix_code(source)
	#source=autopep8.fix_code(source)
	#source=autopep8.fix_code(source)
	#source=autopep8.fix_code(source)
	#source=autopep8.fix_2to3(source)
	#source=yapf.file_resources(source)
	#source=autopep8.fix_lines(source)
	#Kill_non('decoded.py')
	

	open('decoded.py','w').write(source)
	
	#os.system('autopep8 --in-place --aggressive --aggressive decoded.py')
def marsh3():
    lo=1
    try:
        source =open(into,'r').read()
        if lo==1:
            print(lo)
            source=source.replace('\x84!Z\x01d\x02d\x03l','\x84!1\x011\x02d\x03l') 
            save(source,'w','ou')
            #decoder(la,lo)
            
        
    
    
        
        
        
        
        elif lo ==2:
            print(lo)
            source=source.replace('x02Z','x02z')
            save(source,'w','ou')
            decoder(la,lo)
        elif lo ==3:
            print(lo)
            source=source.replace('x1e','x1z')
            save(source,'w','ou')
            decoder(la,lo)
        elif lo ==4:
            print(lo)
            source=source.replace(r'x01d\x02d',r'x01z\x02d')
            save(source,'w','ou')
            decoder(la,lo)            
#  
        else:
           decoder(la,lo)
           
    except UnicodeDecodeError:
              decoder(la,lo)
              
		
def search_func(source: str, function_name: str) -> str:
    pattern: str = r"(" + function_name + r"(?:[\s]+)?\()"
    while True:
        func_names = re.findall(pattern, source)
        if len(func_names) == 0:
            break

        for func_name in func_names:
            index = source.find(func_name)
            if index:
                break

        if index == -1:
            break
        text = func_name
        open_brakets = 1
        for char in source[index + len(func_name):]:
            text += char
            if char == ")":
                open_brakets -= 1
            elif char == "(":
                open_brakets += 1
            if open_brakets == 0:
                break

        yield source[source.find(text):source.find(text) + len(text)]
        source = source[:source.find(text)] + source[source.find(text) + len(text):]

def eval_filter(source) -> str:
    def root_search(all_eval_functions, source):
        for func in all_eval_functions:
            if not func.strip():
                all_eval_functions.remove(func)

        exceptions = 0
        for eval_f in all_eval_functions:
            try:
                eval_body = re.findall(r"\((.+)\)", eval_f)[0]
                bad_functions = ["eval", "exec"]
                is_in = False
                for function in bad_functions:
                    if function in eval_body:
                        is_in = True
                if is_in:
                    root_search(list(set(list(search_func(eval_body, "eval")))), source)
                    exceptions += 1
                    continue
            except IndexError:
                continue

            try:
                try:
                    eval_data = eval(f"b{eval_body}").decode()
                except Exception:
                    eval_data = eval(eval_body)
                source = source.replace(eval_f, eval_data)
            except Exception:
                exceptions += 1
        return source

    return root_search(list(set(list(search_func(source, "eval")))), source)
def get_magic(pyver):
    magic = {
    '3.6' : b'3\r\r\n\x8bq\x98d\x0c\x00\x00\x00\xe3\x00\x00\x00',
    '3.7' : b'B\r\r\n\x00\x00\x00\x00\x8bq\x98d\x0c\x00\x00\x00',
    '3.8' : b'U\r\r\n\x00\x00\x00\x00\tq\x98d\x0b\x00\x00\x00',
    '3.9' : b'a\r\r\n\x00\x00\x00\x00\tq\x98d\x0b\x00\x00\x00',
    '3.10' : b'o\r\r\n\x00\x00\x00\x00\tq\x98d\x0b\x00\x00\x00',
    '3.11' : b'\xa7\r\r\n\x00\x00\x00\x00\x04\x94\x90d\xd4`\x00\x00',
    '3.12' : b'\xcb\r\r\n\x00\x00\x00\x00\tq\x98d\x0b\x00\x00\x00',
    '3.13' : b'\xee\r\r\n\x00\x00\x00\x00*\x80\xb4e\x0b\x00\x00\x00'
    }

def show_code(source: str, temp):
    if not temp:
        p = Process(target=show_code, args=(source, 1))
        p.start()
        p.join(5)
        if p.is_alive():
            p.kill()
            console.print("# [yellow]can't show the code because the file is too big![/yellow]")
    else:
        syntax = Syntax(source, "python", line_numbers=True)
        console.print(syntax)

  
class DecompilePyc:
    def __init__(self, filename: str):
        self.filename = filename
        
        self.std = Popen(["pycdc2", filename], stdout=PIPE,
                         stderr=PIPE)

    def get_source(self) -> Optional[str]:
        out = self.std.stdout.read().decode()
        err = self.std.stderr.read().decode()
        if out and err:
            return out + '\n' + err
        elif out:
            return out
        else:
            #print(err)
            return None

def get_magic(pyver):
    magic = {
    '3.6' : b'3\r\r\n\x8bq\x98d\x0c\x00\x00\x00\xe3\x00\x00\x00',
    '3.7' : b'B\r\r\n\x00\x00\x00\x00\x8bq\x98d\x0c\x00\x00\x00',
    '3.8' : b'U\r\r\n\x00\x00\x00\x00\tq\x98d\x0b\x00\x00\x00',
    '3.9' : b'a\r\r\n\x00\x00\x00\x00\tq\x98d\x0b\x00\x00\x00',
    '3.10' : b'o\r\r\n\x00\x00\x00\x00\tq\x98d\x0b\x00\x00\x00',
    '3.11' : b'\xa7\r\r\n\x00\x00\x00\x00\x04\x94\x90d\xd4`\x00\x00',
    '3.12' : b'\xcb\r\r\n\x00\x00\x00\x00\tq\x98d\x0b\x00\x00\x00',
    '3.13' : b'\xee\r\r\n\x00\x00\x00\x00*\x80\xb4e\x0b\x00\x00\x00'
    }
class DecompileMarshal:
    def __init__(self, bytecode: CodeType):
        self._data: bytes = marshal.dumps(bytecode)
        self._magic_number: bytes = b'a\r\r\n\x00\x00\x00\x00\xe2\xb6\xcea\r\x00\x00\x00'
        

    def get_source(self) -> bytes:
        return self._magic_number + self._data

def get_source_type(source) -> str:
    try:
        compile(source, "<string>", "exec")
        return "py"
    except Exception:
        if type(source) == str:
            source = source.encode("utf-8")
        if b'PK\x03\x04' in source:
            return "zip"
        else:
            try:
                source.decode()
                return "py"
            except Exception:
                return "pyc"



def get_bytecode(source: str) -> CodeType:
    return compile(source, "<strings>", "exec")


def get_bytecode_from_file(filename: str) -> CodeType:
    try:
        with open(filename, "r") as f:
            data = f.read()
        return get_bytecode(data)
    except UnicodeDecodeError:
        with open(filename, "rb") as f:
            data = f.read()
        return marshal.loads(data[16:])

def clean_source(source: Union[str, bytes]) -> Union[str, bytes, CodeType]:
    if type(source) == str:
        try:
           
            #source=source.replace("'))","'")
            
            open('3737373737373','w').write(source)
            get_bytecode(source)
            return source
        except SyntaxError:
           # print(source)
           
            print("# This is not a python file or maybe there is a syntax error!")
            
        except ValueError:
            return source.encode()
    try:
        
        return source.decode("utf-8")
    except UnicodeDecodeError :
        return get_bytecode(source)
def open_file(filename) -> Union[str, bytes, CodeType]:
    try:
        with open(filename, "r") as r_file:
            source=r_file.read()
            source=source.replace("exec(loads","exec(marshal.loads")
            return clean_source(source)
    except UnicodeDecodeError:
        with open(filename, "rb") as rb_file:
            return rb_file.read()

class FakeFunction:
    def __init__(self, source: str, filename: str):
        global __file__
        #aa=marshal.loads(eval(source))
        self.pyc_source = None

        # to save the real functions.
        self.old_webbrowser_open = webbrowser.open
        self.old_os_system = os.system
        self.old__file__ = __file__
        self.old_exec = builtins.exec
        self.old_loads = marshal.loads
        self.old_compile = builtins.compile

        # change real functions to fake function.
        __file__ = filename
        exec = self._fake_exec
        marshal.loads = self._fake_loads
        builtins.compile = self._fake_compile

        # ignore spamm function
        webbrowser.open = lambda *args, **kwargs: None
        os.system = lambda *agrs, **kwargs: None

        # execute the source code.
        try:
            if "eval" in source:
                source = eval_filter(source)
            
            
            self.old_exec(source)
        except ModuleNotFoundError as err:
            print("#", err)
            print("# install the Module first then try again.")
        except SystemError:
            print("# unknown opcode! try to use another python3 version to decode this file.")
        except NameError as err:
            if self.pyc_source is not None:
                pass
            else:
                print("#", err)
                print("# there is a NameError in the file fix it first and try again.")
        except KeyboardInterrupt:
            pass

        # to replace all fake functions with the
        # real function.
        webbrowser.open = self.old_webbrowser_open
        os.system = self.old_os_system
        __file__ = self.old__file__
        builtins.exec = self.old_exec
        marshal.loads = self.old_loads
        builtins.compile = self.old_compile

    def get_source(self) -> Union[str, None, CodeType]:
        if self.pyc_source:
            if type(self.pyc_source) == bytes:
                try:
                    return self.pyc_source.decode()
                except UnicodeDecodeError:
                    return marshal.loads(self.pyc_source)
            else:
                return str(self.pyc_source)
        return None

    def _fake_exec(self, *args, **kwargs):
        if type(args[0]) in (bytes, str):
            self.pyc_source = args[0]

    def _fake_loads(self, *args, **kwargs):
        if type(args[0]) in (bytes, str):
            self.pyc_source = args[0]
        return self.old_loads(*args, **kwargs)

    def _fake_compile(self, *args, **kwargs):
        if type(args[0]) in (bytes, str):
            self.pyc_source = args[0]
        return self.old_compile(*args, **kwargs)


def get_file_type(filename) -> str:
    source = open_file(filename)
    
    return get_source_type(source)
def open_python_file(filename) -> Union[str, bytes, CodeType]:
    source = open_file(filename)
    if get_source_type(filename) == "zip":
        archive = ZipFile(filename)
        py_filename = archive.filelist[0].filename
        source = archive.read(py_filename)
        if get_source_type(source) == "py":
            return clean_source(source)
        return source
    return source

class Pyprivet:
	def __init__(self,file):
		self.file=file
		file=self.file
		cc=r'c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
		
		
		xe3=r'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x'
		n=0
		mod='>eludom<'
		refile=file[::-1]
		
		
		if xe3 in file:
			print('xe3')
			for i in file.split('\\'):
		
			
				if 'x84!Z' in i:
					n+=1
			if n >0:
				moufle=refile.split(mod)[0][::-1].split("'))")[0]
				ns=[]
				#module
				for i in range(len(moufle)//2):
					
					aa=(moufle[i])
					ns.append(aa)
				ns=("".join(ns))
				file=(file.split((ns))[0]+moufle)
				#xe3
				#xe3=file.split('x84!Z')[0]+'x84!Z'
				x84=file[::-1].split('Z!48x')[1].split('3ex')[0]
				
				x84='\\xe3'+x84[::-1]+'x84!Z'
				xe3=file.split(x84)[1]
				xe3="import marshal\nexec(marshal.loads(b'"+x84+xe3+"'))"
				#xe3=marsh93(xe3)
				
				self.file=xe3
				#print(xe3)
			else:
				print('error xe3')
				
				
				
				
		elif cc in file:
			print('ok')
			for i in file.split('\\'):
		
			
				if 'x84!Z' in i:
					n+=1
					
			if n >0:
				moufle=refile.split(mod)[0][::-1].split("'))")[0]
				ns=[]
				#module
				for i in range(len(moufle)//2):
					
					aa=(moufle[i])
					ns.append(aa)
				ns=("".join(ns))
				file=(file.split((ns))[0]+moufle)+"'))"
				#b'c\x00'
				try:
					
					x84=file[::-1].split('Z!48x')[1]
					cc=x84[::-1].split('x00c')[1]
					file=file[::-1].split('Z!48x')[0][::-1]
					file='c'+cc+'x84!Z'+file
					file="import marshal\nexec(marshal.loads(b'"+file
					self.file=file
				except IndexError:
					print(file)
					open('jejeje.txt','w').write(file)
					print('error pyprivet 1')
			else:
				print('error pyprivet 2')
				
					
				
		else:
				print('error1')
				
		#self.file=self.file.replace('!Z\x01d','!z\x01z')
		#self.file=self.file.replace('!Z','!z')
	def source(self):
			
			if r'x84!Z' in self.file:
			    self.file=self.file.replace(r'x84!Z',r'x84!1')
			if r'x84!1\x01d\x02d\x03l' in self.file:
			    self.file=self.file.replace(r'x84!1\x01d\x02d\x03l',r'x84!1\x011\x02d\x03l')
			if  r'x84!1\x01e\x02e\x03\xa0\x04d\x03\xa1\x01\x83\x01Z' in self.file:
				self.file=self.file.replace(r'x84!1\x01e\x02e\x03\xa0\x04d\x03\xa1\x01\x83\x01Z',r'x84!1\x01e\x02e\x03\xa0\x04d\x03\xa1\x01\x83\x011')
				
			#print(self.file)
			open('dec_dbdbdbdhd.py','w').write(self.file)
			save(self.file,'w','ou')
			decoder(la)
				
				
				#return #self.file
class Eval_conv:
	def __init__(self,file):
		self.file=file
		file=self.file
		
	def sorce(self):
		ns={}
		file=self.file	
		for i in file.split('eval'):
			   if '(marshal.loads(b' in i:
			   	
			   	try:
			   		if 'ruuesudjjdejejej' in i:
			   			pass
			   
			   			#print(i)
			   		else:
			   			eve=i.split("(marshal.loads(")[1].split("'))")[0]+"'"
			   			#print(eve)
			   		
			   			res='eval(marshal.loads('+eve+'))'
			   			try:
			   				try:
			   					eve=eval(marshal.loads(eval(eve)))
			   					ns.update({res:eve})
			   					
			   				except EOFError:
			   					pass
			   					
			   				
			   				#print(eve)
			   				
			   			except SyntaxError:
			   				pass
			   				
			   			
			   			
			   			#print(res)
			   			
			   		
		 	
			   	except IndexError:
			   		try:
			   			
			   			
			   			if 'ruuesudjjdejejej' in i:
			   				pass
			   			
			   			try:
			   			
			   				
			   				
			   				
			   			
			   					eve=i.split("eval(marshal.loads(")[1].split('"))')[0]+'"'
			   					res='eval(marshal.loads('+eve+'))'
			   					eve=eval(marshal.loads(eval(eve)))
			   			
			   			
			   					ns.update({res:eve})
			   			except EOFError:
			   				pass
			   		except SyntaxError:
			   			pass
			   
			   			
		
		      	#open('dec_dbdbdbdhd.py','w').write(my_str)
	
		for i,s in ns.items():
				
			if i in file:
				file=file
				ss=file.replace(i,f'"{s}"')
			file=ss
			
			
				    
		save(file,'w','ou')
	def en_marsh(self):
		file=self.file
		try:
			ma=file.split('exec(marshal.loads(')[1].split("'))\n")[0]+"'))"
			ma='import marshal\nexec(marshal.loads('+ma
			save(ma,'w','ou')
			decoder(la,1)
			return 'save'
			
		except IndexError:
			print('error')	
class Byto:
	def __init__(self,file):
		self.file=file
	def en_marsh(self):
		file=self.file
		print('marshal')
		ma=file.split('exec(marshal.loads(')[1].split("'))")[0]
		ok='import marshal\nexec(marshal.loads('+ma+"'))"
		save(ok,'w','ou')
		#Pyprivet(outo).source()
		return 'ok en Byto'
	def source(self):
		
		file=self.file
		#4print(file)
		ls=[]
		doce={}
		
		try:
			
			
		
			for ss in file.split('bytes(['):
				if ']).decode()' in ss:
					isa=ss.split(']).decode()')[0]
					for sha in isa.split(","):
						fin=findall("[0-9]",sha)
						finz="".join(fin)
						try:
							if ' ' in finz:
								pass
							else:
								aa=int(finz)#(str(int(finz))+'jfdjjxdjdidirie')
								ls.append(aa)
								
								
							
						except Exception as E:
							print('errorrrs integr')
					rel=(bytes(ls).decode())
					
					byto='bytes([' + isa.rstrip() +']).decode()'
					doce.update({byto:rel})
					
								
	    	 
			for p,h in doce.items():
				if p in file:
					file=file
					ss=file.replace(p,h)
					
			
							
				
				file=ss
				open('dhdhrhrhrhd.txt','w').write(file)
				
				print('7t74ueuru3u3u')
				
				save(file,'w','ou')
				
				
				
			
				
				
				
			
			#pass
				

		except Exception as E:
			print(E)
			print('okk')

		
	
	
	

	

def decoder(la,lo:Optional[int] =1 ):
    
    
	
	
	
	
	la+=1
	
	source = open_python_file(outo)
	
	file_type = get_file_type(outo)
	
#	print(source)	
	if file_type == "zip":
	       pass
	elif type(source)==str:
	     if 'x84!Z' in source:
	     	open('47474747474.txt','w').write(source)
	     	print(7437373737)
	     	Pyprivet(source).source()
	     


	           	
	           
	           	
	           		       
	      

	     source: Union[str, None, CodeType] = FakeFunction(source, outo).get_source()
	           	
	     	
	     
	     
	     
	      
	       	
	       	
	       	#print(source)
	       	
	       	
	       
	       	
	       	
	       
	       
	       
	       
	
	elif type(source) == bytes:
	       
	       
	       source: str = DecompilePyc(outo).get_source()
	       if '(lambda'  in str(source) :
	           
	           print(source)
	           print(lo)
	           
	           marsh3()
	             
	           
	      
	          #lo+=1
	          
	              
	          
	          #decoder(la,lo)
	          
	               
	       
	           
	               
	               

        
	 
	else:
	       print('Is not python file')
        
       
	if type(source) == str:
     	
	     		
	    
	    

	   #    if 'exec(marshal.loads(' in source:
	  #         save(source,'w','ou')
	           
	           
              
	       cop='''(Python 3.9)''' 
	       if cop in source:
	       	source=source.split(cop)[1]
	       if 'Warning:' in source:
	       	source=source.split('Warning:')[0]
	       save(source,'w','ou')

	           
	     
	       
	       
	       	
#	       source=source.replace('# File: AFRIT(0.1)(2).py (Python 3.9)','#Dec bY GAY TEAM @decpython 🌪️ .')
#	       source=source.split('# Source Generated with Decompyle++')[1]
#	       source=source.split('Warning:')[0]

	       show_code(source, 0)
	       save(source,'w','ou') 
	       if 'exec(zlib' in source:
	           try:
	               prefix = 'import base58\nexec(base58'
	               suffix = source.split('exec(base58', 1)[1].split("'))", 1)[0]
	               source = f"{prefix}{suffix}))" if suffix.endswith("))") else f"{prefix}{suffix}')')"
	           except IndexError:
	               prefix = 'import base58\nexec(base58'
	               suffix = source.split('exec(base58', 1)[1].split('"))', 1)[0]
	               source = f"{prefix}{suffix})" if suffix.endswith(")") else f"{prefix}{suffix}')"
	               save(source, 'w', 'ou')
	               decoder(la, lo)  
	       if 'exec(base64' in source:
	           try:
	               source=source.split('exec(base64')[1].split("'))")[0]
	               source='import base64\nexec(base64'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base64')[1].split('"))')[0]
	               source='import base64\nexec(base64'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	       if 'exec(base32' in source:
	           try:
	               source=source.split('exec(base32')[1].split("'))")[0]
	               source='import base64\nexec(base32'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base32')[1].split('"))')[0]
	               source='import base64\nexec(base32'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	       if 'exec(base16' in source:
	           try:
	               source=source.split('exec(base16')[1].split("'))")[0]
	               source='import base64\nexec(base16'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base16')[1].split('"))')[0]
	               source='import base64\nexec(base16'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)        
	       if 'exec(base85' in source:
	           try:
	               source=source.split('exec(base85')[1].split("'))")[0]
	               source='import base64\nexec(base85'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base85')[1].split('"))')[0]
	               source='import base64\nexec(base85'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)        
	       if 'exec(zlib' in source:
	           try:
	               source=source.split('exec(zlib')[1].split("'))")[0]
	               source='import zlib\nexec(zlib'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(zlib')[1].split('"))')[0]
	               source='import zlib\nexec(zlib'+source+'"))'             
	               save(source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(gzip' in source:
	                   try:
	                    source=source.split('exec(gzip')[1].split("'))")[0]
	                    source='import gzip\nexec(gzip'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(gzip')[1].split('"))')[0]
	               source='import gzip\nexec(gzip'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(base64' in source:
	                    try:
	                     source=source.split('exec(base64')[1].split("'))")[0]
	                     source='import base64\nexec(base64'+source+"'))"
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                    except IndexError:
	                     source=source.split('exec(base64')[1].split('"))')[0]
	                    source='import base64\nexec(base64'+source+'"))'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	               if 'exec(lzma' in source:
	                   try:
	                    source=source.split('exec(lzma')[1].split("'))")[0]
	                    source='import lzma\nexec(lzma'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(lzma')[1].split('"))')[0]
	               source='import lzma\nexec(lzma'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(bytes.fromhex' in source:
	                   try:
	                    source=source.split('exec(bytes.fromhex')[1].split("'))")[0]
	                    source='exec(bytes.fromhex'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(bytes.fromhex')[1].split('"))')[0]
	               source='exec(bytes.fromhex'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(_(' in source:
	                   try:
	                    prefix = '''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''
	                    suffix = source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(''')[1].split("'))")[0]
	                    source = f"{prefix}{suffix}))"  # إضافة المقدمة واللاحقة إلى التعليمات المشفرة
	                    save(source, 'w', 'ou')
	                    decoder(la, lo)
	                   except IndexError:
	                    prefix = '''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''
	                    suffix_index = 1 if source.endswith("')") else 100
	                    suffix = source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(''')[1].split('"))')[0]
	                    source = f"{prefix}{suffix})"  # إضافة المقدمة واللاحقة إلى التعليمات المشفرة
	                    save(source, 'w', 'ou')
	                    decoder(la, lo)
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)('''+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)('''+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('base64').b16decode(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('marshal').loads(__import__('base64').b16decode(__[::-1]));exec((_)('''+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('base64').b16decode(__[::-1]));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__import__('base64').b16decode(__[::-1]));exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	     
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b32decode(__[::-1])); exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b32decode(__[::-1])); exec((_)('''+source+"'))"
	                    m = "_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));"+"\n"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b32decode(__[::-1])); exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b32decode(__[::-1])); exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)('''+source+"'))"
	                    m = "_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));"+"\n"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('gzip').decompress(__import__('lzma').decompress(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1]))));
exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('gzip').decompress(__import__('lzma').decompress(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1]))));
exec((_)('''+source+"'))"
	                    m = "_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));"+"\n"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('gzip').decompress(__import__('lzma').decompress(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1]))));
exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('gzip').decompress(__import__('lzma').decompress(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1]))));
exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(codecs.decode' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(gzip.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(gzip.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(zlib.decompress' in source:
	                   try:
	                    source=source.split('exec(zlib.decompress')[1].split("')).decode())")[0]
	                    source='import zlib\nexec(zlib.decompress'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(zlib.decompress')[1].split('")).decode())')[0]
	               source='import zlib\nexec(zlib.decompress'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(zlib.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split("'))))")[0]
	                    source='import zlib\nexec(zlib.decompress(base64.b64decode'+source+"')))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split('")))')[0]
	               source='import zlib\nexec(zlib.decompress(base64.b64decode'+source+'")))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(marshal.loads(zlib.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(marshal.loads(zlib.decompress(base64.b64decode')[1].split("'))).decode())")[0]
	                    source='exec(marshal.loads(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(marshal.loads(zlib.decompress(base64.b64decode')[1].split('"))).decode())')[0]
	               source='exec(marshal.loads(zlib.decompress(base64.b64decode'+source+'"))).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(zlib.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(base64' in source:
	                    try:
	                     source=source.split('exec(base64')[1].split("')).decode())")[0]
	                     source='import base64\nexec(base64'+source+"')).decode())"
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                    except IndexError:
	                     source=source.split('exec(base64')[1].split('")).decode())')[0]
	                    source='import base64\nexec(base64'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib' in source:
	                         try:
	                          source=source.split('exec(zlib')[1].split("')).decode())")[0]
	                          source='import zlib\nexec(zlib'+source+"')).decode())"
	                          save(source,'w','ou')
	                          decoder(la,lo)
	                         except IndexError:
	                          source=source.split('exec(zlib')[1].split('")).decode())')[0]
	                    source='import zlib\nexec(zlib'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib.decompress(base64.b64decode' in source:
	                     try:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                      source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                      save(source,'w','ou')
	                      decoder(la,lo)
	                     except IndexError:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	                     source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                    if 'exec(zlib.decompress(base64.b64decode' in source:
	                     try:
	                      source=source.split('import zlib\nexec(zlib.decompress(base64.b64decode')[1].split("'))")[0]
	                      source='import zlib\nexec(zlib.decompress(base64.b64decode'+source+"'))"
	                      save(source,'w','ou')
	                      decoder(la,lo)
	                     except IndexError:
	                      source=source.split('import \nzlib\nexec(zlib.decompress(base64.b64decode')[1].split('"))')[0]
	                     source='import zlib\nexec(zlib.decompress(base64.b64decode'+source+'"))'
	                     save(source,'w','ou')
	                     decoder(la,lo)
	               if 'exec((_)(' in source:
	                      try:
	                       prefix = '''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''
	                       suffix = source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                       source = f"{prefix}{suffix}))"  # إضافة المقدمة واللاحقة إلى التعليمات المشفرة
	                      except IndexError:
	                        prefix = '''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''
	                        suffix = source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split('"))')[0]
	                        source = f"{prefix}{suffix})"  # إضافة المقدمة واللاحقة إلى التعليمات المشفرة
	                        save(source, 'w', 'ou')
	                        decoder(la, lo)
	               if 'exec((_)(' in source:
	                      try:
	                       source=source.split('''_ = lambda __ : __import__('zlib').decompress(__[::-1]);exec((_)(''')[1].split("'))")[0]
	                       source='''_ = lambda __ : __import__('zlib').decompress(__[::-1]);exec((_)('''+source+"'))"
	                       save(source,'w','ou')
	                       decoder(la,lo)
	                      except IndexError:
	                        source=source.split('''_ = lambda __ : __import__('zlib').decompress(__[::-1]);exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('zlib').decompress(__[::-1]);exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               	        
	               if 'some_new_encoding(' in source:
	                      try:
	                       source = source.replace('some_new_encoding(', 'another_encoding(')
	                       save(source, 'w', 'ou')
	                       decoder(la, lo)
	                      except Exception as e:
	                       print(f"Error: {e}")       
	               if 'exec((_)(' in source:
	                      try:
	                       source=source.split('''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)(''')[1].split("'))")[0]
	                       source='''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)('''+source+"'))"
	                       save(source,'w','ou')
	                       decoder(la,lo)
	                      except IndexError:
	                        source=source.split('''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)('''+source+'"))'
	               save(source,'w','ou')
	                   
	                   
	                   
	                    
	                     
	                     
	                     
	                     
	               if 'exec(gzip' in source:
	                   try:
	                    source=source.split('exec(gzip')[1].split("'))")[0]
	                    source='import gzip\nexec(gzip'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(gzip')[1].split('"))')[0]
	               source='import gzip\nexec(gzip'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(lzma' in source:
	                   try:
	                    source=source.split('exec(lzma')[1].split("'))")[0]
	                    source='import lzma\nexec(lzma'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(lzma')[1].split('"))')[0]
	               source='import lzma\nexec(lzma'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(bytes.fromhex' in source:
	                   try:
	                    source=source.split('exec(bytes.fromhex')[1].split("'))")[0]
	                    source='exec(bytes.fromhex'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(bytes.fromhex')[1].split('"))')[0]
	               source='exec(bytes.fromhex'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''+source+"'))"
	                    m = "_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));"+"\n"
	                    save(m+source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''+source+'"))'
	               save(m+source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(codecs.decode' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(gzip.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(gzip.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(zlib.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(base64' in source:
	                    try:
	                     source=source.split('exec(base64')[1].split("')).decode())")[0]
	                     source='import base64\nexec(base64'+source+"')).decode())"
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                    except IndexError:
	                     source=source.split('exec(base64')[1].split('")).decode())')[0]
	                    source='import base64\nexec(base64'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib' in source:
	                         try:
	                          source=source.split('exec(zlib')[1].split("')).decode())")[0]
	                          source='import zlib\nexec(zlib'+source+"')).decode())"
	                          save(source,'w','ou')
	                          decoder(la,lo)
	                         except IndexError:
	                          source=source.split('exec(zlib')[1].split('")).decode())')[0]
	                    source='import zlib\nexec(zlib'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib.decompress(base64.b64decode' in source:
	                     try:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                      source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                      save(source,'w','ou')
	                      decoder(la,lo)
	                     except IndexError:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	                     source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                     if 'exec((_)(' in source:
	                      try:
	                       source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                       source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''+source+"'))"
	                       save(source,'w','ou')
	                       decoder(la,lo)
	                      except IndexError:
	                        source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               
	                       
	                       
	                       
	                      
	                        
	               source='''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               
	               source='import zlib\nexec(zlib'+source+"')).decode())"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(zlib')[1].split('")).decode())')[0]
	               source='import zlib\nexec(zlib'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip' in source:
	                   try:
	                    source=source.split('exec(gzip')[1].split("'))")[0]
	                    source='import gzip\nexec(gzip'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(gzip')[1].split('"))')[0]
	               source='import gzip\nexec(gzip'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(lzma' in source:
	                   try:
	                    source=source.split('exec(lzma')[1].split("'))")[0]
	                    source='import lzma\nexec(lzma'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(lzma')[1].split('"))')[0]
	               source='import lzma\nexec(lzma'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(bytes.fromhex' in source:
	                   try:
	                    source=source.split('exec(bytes.fromhex')[1].split("'))")[0]
	                    source='exec(bytes.fromhex'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(bytes.fromhex')[1].split('"))')[0]
	               source='exec(bytes.fromhex'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''+source+"'))"
	                    m = "_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));"+"\n"
	                    save(m+source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''+source+'"))'
	               save(m+source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(codecs.decode' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(gzip.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(gzip.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(zlib.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(base64' in source:
	                    try:
	                     source=source.split('exec(base64')[1].split("')).decode())")[0]
	                     source='import base64\nexec(base64'+source+"')).decode())"
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                    except IndexError:
	                     source=source.split('exec(base64')[1].split('")).decode())')[0]
	                    source='import base64\nexec(base64'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib' in source:
	                         try:
	                          source=source.split('exec(zlib')[1].split("')).decode())")[0]
	                          source='import zlib\nexec(zlib'+source+"')).decode())"
	                          save(source,'w','ou')
	                          decoder(la,lo)
	                         except IndexError:
	                          source=source.split('exec(zlib')[1].split('")).decode())')[0]
	                    source='import zlib\nexec(zlib'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib.decompress(base64.b64decode' in source:
	                     try:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                      source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                      save(source,'w','ou')
	                      decoder(la,lo)
	                     except IndexError:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	                     source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                     if 'exec((_)(' in source:
	                      try:
	                       source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                       source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''+source+"'))"
	                       save(source,'w','ou')
	                       decoder(la,lo)
	                      except IndexError:
	                        source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               
	               source='import base64\nexec(base64'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base64')[1].split('"))')[0]
	               source='import base64\nexec(base64'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	       if 'exec(zlib' in source:
	           try:
	               source=source.split('exec(zlib')[1].split("'))")[0]
	               source='import zlib\nexec(zlib'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(zlib')[1].split('"))')[0]
	               source='import zlib\nexec(zlib'+source+'"))'
	               save(source,'w','ou')
	               
	               source='import base64\nexec(base64'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base64')[1].split('"))')[0]
	               source='import base64\nexec(base64'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	       if 'exec(zlib' in source:
	           try:
	               source=source.split('exec(zlib')[1].split("'))")[0]
	               source='import zlib\nexec(zlib'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(zlib')[1].split('"))')[0]
	               source='import zlib\nexec(zlib'+source+'"))'
	               save(source,'w','ou')
	               
	                    
	                    
	                    
	                   
	                    
	                   
	                   
	                    
	                   
	                    
	                     
	                     
	                     
	                    
	               source='import gzip\nexec(gzip'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(lzma' in source:
	                   try:
	                    source=source.split('exec(lzma')[1].split("'))")[0]
	                    source='import lzma\nexec(lzma'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(lzma')[1].split('"))')[0]
	               source='import lzma\nexec(lzma'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(bytes.fromhex' in source:
	                   try:
	                    source=source.split('exec(bytes.fromhex')[1].split("'))")[0]
	                    source='exec(bytes.fromhex'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(bytes.fromhex')[1].split('"))')[0]
	               source='exec(bytes.fromhex'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''+source+"'))"
	                    m = "_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));"+"\n"
	                    save(m+source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''+source+'"))'
	               save(m+source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(codecs.decode' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(gzip.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(gzip.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(zlib.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(base64' in source:
	                    try:
	                     source=source.split('exec(base64')[1].split("')).decode())")[0]
	                     source='import base64\nexec(base64'+source+"')).decode())"
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                    except IndexError:
	                     source=source.split('exec(base64')[1].split('")).decode())')[0]
	                    source='import base64\nexec(base64'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib' in source:
	                         try:
	                          source=source.split('exec(zlib')[1].split("')).decode())")[0]
	                          source='import zlib\nexec(zlib'+source+"')).decode())"
	                          save(source,'w','ou')
	                          decoder(la,lo)
	                         except IndexError:
	                          source=source.split('exec(zlib')[1].split('")).decode())')[0]
	                    source='import zlib\nexec(zlib'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib.decompress(base64.b64decode' in source:
	                     try:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                      source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                      save(source,'w','ou')
	                      decoder(la,lo)
	                     except IndexError:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	                     source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                     if 'exec((_)(' in source:
	                      try:
	                       source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                       source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''+source+"'))"
	                       save(source,'w','ou')
	                       decoder(la,lo)
	                      except IndexError:
	                        source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               
	               source='import base64\nexec(base64'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base64')[1].split('"))')[0]
	               source='import base64\nexec(base64'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	       if 'exec(zlib' in source:
	           try:
	               source=source.split('exec(zlib')[1].split("'))")[0]
	               source='import zlib\nexec(zlib'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(zlib')[1].split('"))')[0]
	               source='import zlib\nexec(zlib'+source+'"))'
	               save(source,'w','ou')
	               
	                    
	                    
	                    
	                    
	                   
	                   
	       if 'exec(zlib' in source:
	           try:
	               source=source.split('exec(zlib')[1].split("')).decode())")[0]
	               source='import zlib\nexec(zlib'+source+"')).decode())"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(zlib')[1].split('")).decode())')[0]
	               source='import zlib\nexec(zlib'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip' in source:
	                   try:
	                    source=source.split('exec(gzip')[1].split("'))")[0]
	                    source='import gzip\nexec(gzip'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(gzip')[1].split('"))')[0]
	               source='import gzip\nexec(gzip'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(lzma' in source:
	                   try:
	                    source=source.split('exec(lzma')[1].split("'))")[0]
	                    source='import lzma\nexec(lzma'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(lzma')[1].split('"))')[0]
	               source='import lzma\nexec(lzma'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(bytes.fromhex' in source:
	                   try:
	                    source=source.split('exec(bytes.fromhex')[1].split("'))")[0]
	                    source='exec(bytes.fromhex'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(bytes.fromhex')[1].split('"))')[0]
	               source='exec(bytes.fromhex'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''+source+"'))"
	                    m = "_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));"+"\n"
	                    save(m+source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''+source+'"))'
	               save(m+source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(codecs.decode' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(gzip.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(gzip.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(zlib.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(base64' in source:
	                    try:
	                     source=source.split('exec(base64')[1].split("')).decode())")[0]
	                     source='import base64\nexec(base64'+source+"')).decode())"
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                    except IndexError:
	                     source=source.split('exec(base64')[1].split('")).decode())')[0]
	                    source='import base64\nexec(base64'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib' in source:
	                         try:
	                          source=source.split('exec(zlib')[1].split("')).decode())")[0]
	                          source='import zlib\nexec(zlib'+source+"')).decode())"
	                          save(source,'w','ou')
	                          decoder(la,lo)
	                         except IndexError:
	                          source=source.split('exec(zlib')[1].split('")).decode())')[0]
	                    source='import zlib\nexec(zlib'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib.decompress(base64.b64decode' in source:
	                     try:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                      source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                      save(source,'w','ou')
	                      decoder(la,lo)
	                     except IndexError:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	                     source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                     if 'exec((_)(' in source:
	                      try:
	                       source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                       source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''+source+"'))"
	                       save(source,'w','ou')
	                       decoder(la,lo)
	                      except IndexError:
	                        source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               
	               source='import base64\nexec(base64'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base64')[1].split('"))')[0]
	               source='import base64\nexec(base64'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	       if 'exec(zlib' in source:
	           try:
	               source=source.split('exec(zlib')[1].split("'))")[0]
	               source='import zlib\nexec(zlib'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(zlib')[1].split('"))')[0]
	               source='import zlib\nexec(zlib'+source+'"))'
	               save(source,'w','ou')
	               
	               suffix = source.split('exec(base58', 1)[1].split("'))", 1)[0]
	               source = f"{prefix}{suffix}))" if suffix.endswith("))") else f"{prefix}{suffix}')')"
	           except IndexError:
	               prefix = 'import base58\nexec(base58'
	               suffix = source.split('exec(base58', 1)[1].split('"))', 1)[0]
	               source = f"{prefix}{suffix})" if suffix.endswith(")") else f"{prefix}{suffix}')"
	               save(source, 'w', 'ou')
	               decoder(la, lo)  
	       if 'exec(base64' in source:
	           try:
	               source=source.split('exec(base64')[1].split("'))")[0]
	               source='import base64\nexec(base64'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base64')[1].split('"))')[0]
	               source='import base64\nexec(base64'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	       if 'exec(base32' in source:
	           try:
	               source=source.split('exec(base32')[1].split("'))")[0]
	               source='import base64\nexec(base32'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base32')[1].split('"))')[0]
	               source='import base64\nexec(base32'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	       if 'exec(base16' in source:
	           try:
	               source=source.split('exec(base16')[1].split("'))")[0]
	               source='import base64\nexec(base16'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base16')[1].split('"))')[0]
	               source='import base64\nexec(base16'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)        
	       if 'exec(base85' in source:
	           try:
	               source=source.split('exec(base85')[1].split("'))")[0]
	               source='import base64\nexec(base85'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base85')[1].split('"))')[0]
	               source='import base64\nexec(base85'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)        
	       if 'exec(zlib' in source:
	           try:
	               source=source.split('exec(zlib')[1].split("'))")[0]
	               source='import zlib\nexec(zlib'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(zlib')[1].split('"))')[0]
	               source='import zlib\nexec(zlib'+source+'"))'             
	               save(source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(gzip' in source:
	                   try:
	                    source=source.split('exec(gzip')[1].split("'))")[0]
	                    source='import gzip\nexec(gzip'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(gzip')[1].split('"))')[0]
	               source='import gzip\nexec(gzip'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(base64' in source:
	                    try:
	                     source=source.split('exec(base64')[1].split("'))")[0]
	                     source='import base64\nexec(base64'+source+"'))"
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                    except IndexError:
	                     source=source.split('exec(base64')[1].split('"))')[0]
	                    source='import base64\nexec(base64'+source+'"))'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	               if 'exec(lzma' in source:
	                   try:
	                    source=source.split('exec(lzma')[1].split("'))")[0]
	                    source='import lzma\nexec(lzma'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(lzma')[1].split('"))')[0]
	               source='import lzma\nexec(lzma'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(bytes.fromhex' in source:
	                   try:
	                    source=source.split('exec(bytes.fromhex')[1].split("'))")[0]
	                    source='exec(bytes.fromhex'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(bytes.fromhex')[1].split('"))')[0]
	               source='exec(bytes.fromhex'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(_(' in source:
	                   try:
	                    prefix = '''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''
	                    suffix = source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(''')[1].split("'))")[0]
	                    source = f"{prefix}{suffix}))"  # إضافة المقدمة واللاحقة إلى التعليمات المشفرة
	                    save(source, 'w', 'ou')
	                    decoder(la, lo)
	                   except IndexError:
	                    prefix = '''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''
	                    suffix_index = 1 if source.endswith("')") else 100
	                    suffix = source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)(''')[1].split('"))')[0]
	                    source = f"{prefix}{suffix})"  # إضافة المقدمة واللاحقة إلى التعليمات المشفرة
	                    save(source, 'w', 'ou')
	                    decoder(la, lo)
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)('''+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)('''+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__[::-1]));exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('base64').b16decode(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('marshal').loads(__import__('base64').b16decode(__[::-1]));exec((_)('''+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__import__('base64').b16decode(__[::-1]));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__import__('base64').b16decode(__[::-1]));exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	     
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b32decode(__[::-1])); exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b32decode(__[::-1])); exec((_)('''+source+"'))"
	                    m = "_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));"+"\n"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b32decode(__[::-1])); exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b32decode(__[::-1])); exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)('''+source+"'))"
	                    m = "_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));"+"\n"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(_(' in source:
	                   try:
	                    source=source.split('''_ = lambda __ : __import__('gzip').decompress(__import__('lzma').decompress(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1]))));
exec((_)(''')[1].split("'))")[0]
	                    source='''_ = lambda __ : __import__('gzip').decompress(__import__('lzma').decompress(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1]))));
exec((_)('''+source+"'))"
	                    m = "_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));"+"\n"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('''_ = lambda __ : __import__('gzip').decompress(__import__('lzma').decompress(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1]))));
exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('gzip').decompress(__import__('lzma').decompress(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1]))));
exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(codecs.decode' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(gzip.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(gzip.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(zlib.decompress' in source:
	                   try:
	                    source=source.split('exec(zlib.decompress')[1].split("')).decode())")[0]
	                    source='import zlib\nexec(zlib.decompress'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(zlib.decompress')[1].split('")).decode())')[0]
	               source='import zlib\nexec(zlib.decompress'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(zlib.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split("'))))")[0]
	                    source='import zlib\nexec(zlib.decompress(base64.b64decode'+source+"')))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split('")))')[0]
	               source='import zlib\nexec(zlib.decompress(base64.b64decode'+source+'")))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(marshal.loads(zlib.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(marshal.loads(zlib.decompress(base64.b64decode')[1].split("'))).decode())")[0]
	                    source='exec(marshal.loads(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(marshal.loads(zlib.decompress(base64.b64decode')[1].split('"))).decode())')[0]
	               source='exec(marshal.loads(zlib.decompress(base64.b64decode'+source+'"))).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(zlib.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(base64' in source:
	                    try:
	                     source=source.split('exec(base64')[1].split("')).decode())")[0]
	                     source='import base64\nexec(base64'+source+"')).decode())"
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                    except IndexError:
	                     source=source.split('exec(base64')[1].split('")).decode())')[0]
	                    source='import base64\nexec(base64'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib' in source:
	                         try:
	                          source=source.split('exec(zlib')[1].split("')).decode())")[0]
	                          source='import zlib\nexec(zlib'+source+"')).decode())"
	                          save(source,'w','ou')
	                          decoder(la,lo)
	                         except IndexError:
	                          source=source.split('exec(zlib')[1].split('")).decode())')[0]
	                    source='import zlib\nexec(zlib'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib.decompress(base64.b64decode' in source:
	                     try:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                      source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                      save(source,'w','ou')
	                      decoder(la,lo)
	                     except IndexError:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	                     source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                    if 'exec(zlib.decompress(base64.b64decode' in source:
	                     try:
	                      source=source.split('import zlib\nexec(zlib.decompress(base64.b64decode')[1].split("'))")[0]
	                      source='import zlib\nexec(zlib.decompress(base64.b64decode'+source+"'))"
	                      save(source,'w','ou')
	                      decoder(la,lo)
	                     except IndexError:
	                      source=source.split('import \nzlib\nexec(zlib.decompress(base64.b64decode')[1].split('"))')[0]
	                     source='import zlib\nexec(zlib.decompress(base64.b64decode'+source+'"))'
	                     save(source,'w','ou')
	                     decoder(la,lo)
	               if 'exec((_)(' in source:
	                      try:
	                       prefix = '''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''
	                       suffix = source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                       source = f"{prefix}{suffix}))"  # إضافة المقدمة واللاحقة إلى التعليمات المشفرة
	                      except IndexError:
	                        prefix = '''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''
	                        suffix = source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split('"))')[0]
	                        source = f"{prefix}{suffix})"  # إضافة المقدمة واللاحقة إلى التعليمات المشفرة
	                        save(source, 'w', 'ou')
	                        decoder(la, lo)
	               if 'exec((_)(' in source:
	                      try:
	                       source=source.split('''_ = lambda __ : __import__('zlib').decompress(__[::-1]);exec((_)(''')[1].split("'))")[0]
	                       source='''_ = lambda __ : __import__('zlib').decompress(__[::-1]);exec((_)('''+source+"'))"
	                       save(source,'w','ou')
	                       decoder(la,lo)
	                      except IndexError:
	                        source=source.split('''_ = lambda __ : __import__('zlib').decompress(__[::-1]);exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('zlib').decompress(__[::-1]);exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               	        
	               if 'some_new_encoding(' in source:
	                      try:
	                       source = source.replace('some_new_encoding(', 'another_encoding(')
	                       save(source, 'w', 'ou')
	                       decoder(la, lo)
	                      except Exception as e:
	                       print(f"Error: {e}")       
	               if 'exec((_)(' in source:
	                      try:
	                       source=source.split('''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)(''')[1].split("'))")[0]
	                       source='''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)('''+source+"'))"
	                       save(source,'w','ou')
	                       decoder(la,lo)
	                      except IndexError:
	                        source=source.split('''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	   
	               source='import base64\nexec(base64'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base64')[1].split('"))')[0]
	               source='import base64\nexec(base64'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	       if 'exec(zlib' in source:
	           try:
	               source=source.split('exec(zlib')[1].split("'))")[0]
	               source='import zlib\nexec(zlib'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(zlib')[1].split('"))')[0]
	               source='import zlib\nexec(zlib'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	  
	               source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''+source+'"))'
	               save(m+source,'w','ou')
	               
	                    
	                    
	                    
	                    
	                   
	                    
	               source='''_ = lambda __ : __import__('marshal').loads(__import__('zlib').decompress(__import__('base64').b64decode(__[::-1])));exec((_)('''+source+'"))'
	               save(m+source,'w','ou')
	               decoder(la,lo)	               
	               if 'exec(codecs.decode' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(gzip.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(gzip.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(gzip.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(gzip.' in source:
	                   try:
	                    source=source.split('exec(codecs.decode')[1].split("'))")[0]
	                    source='exec(codecs.decode'+source+"'))"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(codecs.decode')[1].split('"))')[0]
	               source='exec(codecs.decode'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(zlib.decompress(base64.b64decode' in source:
	                   try:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                    source='exec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                   except IndexError:
	                    source=source.split('exec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	               source='exec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	               save(source,'w','ou')
	               decoder(la,lo)
	               if 'exec(base64' in source:
	                    try:
	                     source=source.split('exec(base64')[1].split("')).decode())")[0]
	                     source='import base64\nexec(base64'+source+"')).decode())"
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                    except IndexError:
	                     source=source.split('exec(base64')[1].split('")).decode())')[0]
	                    source='import base64\nexec(base64'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib' in source:
	                         try:
	                          source=source.split('exec(zlib')[1].split("')).decode())")[0]
	                          source='import zlib\nexec(zlib'+source+"')).decode())"
	                          save(source,'w','ou')
	                          decoder(la,lo)
	                         except IndexError:
	                          source=source.split('exec(zlib')[1].split('")).decode())')[0]
	                    source='import zlib\nexec(zlib'+source+'")).decode())'
	                    save(source,'w','ou')
	                    decoder(la,lo)
	                    if 'exec(zlib.decompress(base64.b64decode' in source:
	                     try:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split("')).decode())")[0]
	                      source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+"')).decode())"
	                      save(source,'w','ou')
	                      decoder(la,lo)
	                     except IndexError:
	                      source=source.split('import base64\nzlib\nexec(zlib.decompress(base64.b64decode')[1].split('")).decode())')[0]
	                     source='import base64\nzlib\nexec(zlib.decompress(base64.b64decode'+source+'")).decode())'
	                     save(source,'w','ou')
	                     decoder(la,lo)
	                     if 'exec((_)(' in source:
	                      try:
	                       source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split("'))")[0]
	                       source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''+source+"'))"
	                       save(source,'w','ou')
	                       decoder(la,lo)
	                      except IndexError:
	                        source=source.split('''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(''')[1].split('"))')[0]
	               source='''_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)('''+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	                
	       if 'exec(marshal.loads' in source:
	       	if 'eval' in source:
	       		if 'exec(marshal.loads' in source:
	       			Eval_conv(source).en_marsh()
	       		else:
	       			Eval_conv(source).sorce()
	       		
	       	else:
	       		        show_code(source, 0)
	       save(source,'w','ou') 
	       if 'exec(base64' in source:
	           try:
	               source=source.split('exec(base64')[1].split("'))")[0]
	               source='import base64\nexec(base64'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(base64')[1].split('"))')[0]
	               source='import base64\nexec(base64'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)
	       if 'exec(zlib' in source:
	           try:
	               source=source.split('exec(zlib')[1].split("'))")[0]
	               source='import zlib\nexec(zlib'+source+"'))"
	               save(source,'w','ou')
	               decoder(la,lo)
	           except IndexError:
	               source=source.split('exec(zlib')[1].split('"))')[0]
	               source='import zlib\nexec(zlib'+source+'"))'
	               save(source,'w','ou')
	               decoder(la,lo)	               	               
	       if 'exec(marshal.loads' in source:
	       	if 'eval' in source:
	       		if 'exec(marshal.loads' in source:
	       			Eval_conv(source).en_marsh()
	       		else:
	       			Eval_conv(source).sorce()
	       		
	       	else:
	       		decoder(la,lo)
	     
	       if 'eval(' in source:
	       	if 'exec(marsh' in source:
	       		Eval_conv(source).en_marsh()
	       	
	       	else:
	       		print('eval(')
	       		Eval_conv(source).sorce()
	       if 'bytes([' in source:
	       	if 'exec(marshal' in source:
	       		Byto(source).en_marsh()
	       	else:
	       		bytos(source)

	       if len(source) > 250:	       		       	
	        m='''
#</> [⌯] - Decoded By Mr - جاك \n\n#</> [⌯] - Telegram : @O_O_P_V 
'''+"\n"
	        save(m+source,'w','ou')
	        decoder(la,lo)
	       	file=open('Decode_'+na,'r').read()
	       	open(outo,'w').write(open('decoded.py','r').read())
	       	if 'std::bad_cast' in file:
	       			
	       			exit()
	       	else:
	       			fs=0
	       			for cop in Copyright:
	       				if cop in file:
	       					fs+=1
	       			if fs > 0:
	       				print('')
							
	       			#elif '(lambda' in file:
	       			    #pass
	       			elif fs == 0:
	       				clear_un(file)
	       				kill_non('decoded.py')
	       				open(outo,'w').write(open('decoded.py','r').read())

	       				       				
	       				la=0
	       				return 1
	       				pass 
	       				pass	       	
	        if '57]).decode():' in source:
	           pass
	           if 'exec(marshal.loads(' in source:
	           	Byto(source).en_marsh()
	           else:
	           	Byto(source).source()
	           
	elif type(source) == CodeType:
	       source: bytes = DecompileMarshal(source).get_source()   
	       save(source,"wb",'ou')
	else:
#	       print(type(source))
	       print('')
	if type(source) == bytes:
		decoder(la,lo)
	if type(source) == str:
		if 'exec(marshal.loads(' in source:
		       decoder(la,lo) 
def save(source,w,typ):
	if typ=='ou':
		open(outo,w).write(source)
	elif typ=='ine':
		open(into,w).write(source)
		
def main(na,m):
	global file,into,outo, lay,reb,la,outo
	lo=0
	la=layrs
	reb=m
	into=na
	outo='Decode_'+into
	try:
	    file=open(into,'r').read()
	    open(outo,'w')
	    save(file,'w','ou')
	    file=open(outo,'r').read()
	    lay=0
	    while 1 > lay:
	        lay+=1
	        print('\x1b[1;92m\x1b[38;5;46mDecode...')
	        file=open(outo,'r').read()	        
	        decoder(la,lo='anything')
	except UnicodeDecodeError:		
		file=open(into,'rb').read()
		decoder(la,lo)
	            	
	            
	            
	            
	            

			
		
		
		
	except UnicodeDecodeError:
		
		file=open(into,'rb').read()
		decoder(la,lo)
		
	
		
	
	
	
	

asu = random.choice([m,k,h,u,b])


 
logo =  """
▓█████▄  ▓█████   ▄████▄    ▒█████   ▓█████▄  ▓█████   ██▀███   
▒██▀ ██▌ ▓█   ▀  ▒██▀ ▀█   ▒██▒  ██▒ ▒██▀ ██▌ ▓█   ▀  ▓██ ▒ ██▒ 
░██   █▌ ▒███    ▒▓█    ▄  ▒██░  ██▒ ░██   █▌ ▒███    ▓██ ░▄█ ▒ 
░▓█▄   ▌ ▒▓█  ▄  ▒▓▓▄ ▄██▒ ▒██   ██░ ░▓█▄   ▌ ▒▓█  ▄  ▒██▀▀█▄   
░▒████▓  ░▒████▒ ▒ ▓███▀ ░ ░ ████▓▒░ ░▒████▓  ░▒████▒ ░██▓ ▒██▒ 
 ▒▒▓  ▒  ░░ ▒░ ░ ░ ░▒ ▒  ░ ░ ▒░▒░▒░   ▒▒▓  ▒  ░░ ▒░ ░ ░ ▒▓ ░▒▓░ 
 ░ ▒  ▒   ░ ░  ░   ░  ▒      ░ ▒ ▒░   ░ ▒  ▒   ░ ░  ░   ░▒ ░ ▒░ 
 ░ ░  ░     ░    ░         ░ ░ ░ ▒    ░ ░  ░     ░      ░░   ░  
   ░        ░  ░ ░ ░           ░ ░      ░        ░  ░    ░      
        """            
print(a1+' ')                     
print(logo)                      

def decode():     
    print(f'{N}[{asu}[OF-1] {N}]{H}  Decode   {N}: \033[41m\033[1;37m Marshall   \x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-2] {N}]{H}  Decode   {N}: \033[41m\033[1;37m Marshal [3.11] \x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-3] {N}]{H}  Decode   {N}: \033[41m\033[1;37m Marshal [3.12]\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-4] {N}]{H}  Decode   {N}: \033[41m\033[1;37m Marshal [3.13]\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-5] {N}]{H}  Decode   {N}: \033[41m\033[1;37m Enc Maeyouf\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-6] {N}]{H}  Decode   {N}: \033[41m\033[1;37m HEX ➤ bese64 ➤ zlib\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-7] {N}]{H}  Decode   {N}: \033[41m\033[1;37m HEX\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-8] {N}]{H}  Decode   {N}: \033[41m\033[1;37m Base64 ➤ Base16 ➤ Base32 ➤ Base85\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-9] {N}]{H}  Decode   {N}: \033[41m\033[1;37m zlib\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-10] {N}]{H}  Decode  {N}: \033[41m\033[1;37m lzma ➤ zlib\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ') 
    print(f'{N}[{asu}[OF-11] {N}]{H}  Decode  {N}: \033[41m\033[1;37m gzip ➤ lzma ➤ zlib\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-12] {N}]{H}  Decode  {N}: \033[41m\033[1;37m  exec ( ( lambda ________• ________ : ________\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-13] {N}]{H}  Decode  {N}: \033[41m\033[1;37m base64 ➤ zlib\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-14] {N}]{H}  Decode  {N}: \033[41m\033[1;37m By Uncompyle6\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-15] {N}]{H}  Decode  {N}: \033[41m\033[1;37m By Mardis \x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-16] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Strings\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ') 
    print(f'{N}[{asu}[OF-17] {N}]{H}  Decode  {N}: \033[41m\033[1;37m lock (🔒)\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-18] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Lambda ➤ Marshal ➤ Base64 ➤ zlib [V1]\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-19] {N}]{H}  Decode  {N}: \033[41m\033[1;37m  Lambda  ➤ Marshal ➤ Base64 ➤ zlib [V2]\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-20] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Marshal ➤ Base64 ➤ BB5\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-21] {N}]{H}  Decode  {N}: \033[41m\033[1;37m _= lambda__ : __lmport__(zlib).\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-22] {N}]{H}  Decode  {N}: \033[41m\033[1;37m 😀😁😂🤣😃😄😅😆\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-23] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Bas\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-24] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Base4\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-25] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Base16\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ') 
    print(f'{N}[{asu}[OF-26] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Base32\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-27] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Base64\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-28] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Base85\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-29] {N}]{H}  Decode  {N}: \033[41m\033[1;37m codecs\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-30] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Gzip_base64\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-31] {N}]{H}  Decode  {N}: \033[41m\033[1;37m am_eva\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-32] {N}]{H}  Decode  {N}: \033[41m\033[1;37m obf_Hard\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-33] {N}]{H}  Decode  {N}: \033[41m\033[1;37m simple\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-34] {N}]{H}  Decode  {N}: \033[41m\033[1;37m gzip\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-35] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Gzip_base3\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-36] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Lzma\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-37] {N}]{H}  Decode  {N}: \033[41m\033[1;37m  [🔒] Level 2 \x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-38] {N}]{H}  Decode  {N}: \033[41m\033[1;37m _=lambda__ : __import__(base64).\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-39] {N}]{H}  Decode  {N}: \033[41m\033[1;37m EXECUTABIE\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-40] {N}]{H}  Decode  {N}: \033[41m\033[1;37m pyc    \x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-41] {N}]{H}  Decode  {N}: \033[41m\033[1;37m OBF       \x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-42] {N}]{H}  Decode  {N}: \033[41m\033[1;37m ENC_SIMPIE \x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[OF-43] {N}]{H}  Decode  {N}: \033[41m\033[1;37m EASY_OBF  \x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[ON-44] {N}]{H}  Decode  {N}: \033[41m\033[1;37m Cython   \x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[ON-45] {N}]{H}  Decode  {N}: \033[41m\033[1;37m C4  \x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print(f'{N}[{asu}[ON-46] {N}]{H}  Decode  {N}: \033[41m\033[1;37m play\x1b[0m\x1b[1;97m{N}')
    print(a1+'▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$▭$▬$▭$▬$▭$▬▬$▭$▬$▭$▬$▭$▬$▬$▭$▬$          ')
    print('')    
 
        
    
    print('')
    
    print('')    
if __name__ == "__main__":
    decode()	
layrs=0
na=input("𝙳𝙾𝙽𝙴 𝙳𝙴𝙲𝙾𝙳𝙴𝙳 𖤹  ")
print('تم الفك') 
d=1
main(na,d)
try:
 os.remove("3737373737373")
 os.remove("decoded.py")
except:
 pass	


	
	
	


	
	
	
